var tipuesearch = {"pages":[{"title":" FRICTION ","text":"FRICTION Developer Info Jason Christopherson","tags":"home","loc":"index.html"},{"title":"coulomb_model â€“ FRICTION ","text":"type, public, extends( friction_model ) :: coulomb_model Defines the basic Coulomb friction model. The Coulomb model is defined as follows. where: Friction Force Normal Force Velocity Coulomb Friction Coefficient Contents Variables friction_coefficient Type-Bound Procedures constraint_equations evaluate fit from_array get_constraint_equation_count get_state_variable_count has_internal_state parameter_count state to_array Components Type Visibility Attributes Name Initial real(kind=real64), public :: friction_coefficient The Coulomb friction coefficient. Type-Bound Procedures procedure, public :: constraint_equations => fmdl_constraints interface private module subroutine fmdl_constraints(this, t, x, dxdt, nrm, f, rst) Overload this routine to establish constraings for the model to\nbe enforced as part of the fitting operation. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction_model object. real(kind=real64), intent(in), dimension(:) :: t An N-element array containing the time points at which the\ndata to be fit was sampled. real(kind=real64), intent(in), dimension(:) :: x An N-element array containing the relative motion data. real(kind=real64), intent(in), dimension(:) :: dxdt An N-element array containing the relative velocity data. real(kind=real64), intent(in), dimension(:) :: nrm An N-element array containing the normal force data. real(kind=real64), intent(in), dimension(:) :: f An N-element array containing the friction force data. real(kind=real64), intent(out), dimension(:) :: rst An M-element array where the results of the constraint \nequations will be written.  M must be equal to the \nnumber of constraint equations for the model. procedure, public :: evaluate => cf_eval interface private module function cf_eval(this, t, x, dxdt, nrm, svars) result(rst) Evaluates the friction model given the defined parameter\nstate. Arguments Type Intent Optional Attributes Name class( coulomb_model ), intent(inout) :: this The coulomb_model object. real(kind=real64), intent(in) :: t The current simulation time value. real(kind=real64), intent(in) :: x The current value of the relative position between\nthe contacting bodies. real(kind=real64), intent(in) :: dxdt The current value of the relative velocity between\nthe contacting bodies. real(kind=real64), intent(in) :: nrm The current normal force between the contacting \nbodies. real(kind=real64), intent(in), optional, dimension(:) :: svars An optional array containing any internal state\nvariables the model may rely upon. Return Value real(kind=real64) The friction force. procedure, public :: fit => fmdl_fit interface private module subroutine fmdl_fit(this, t, x, v, f, n, weights, maxp, minp, alpha, integrator, controls, settings, info, stats, fmod, resid, err) Attempts to fit a friction model to the supplied data using a \nLevenberg-Marquardt solver. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(inout), target :: this The friction model.  On output, the model is updated with the\nfinal, fitted parameters. real(kind=real64), intent(in), target, dimension(:) :: t An N-element array containing the time points at which\nthe friction data was sampled.  This array must contain \nmonotonically increasing data. real(kind=real64), intent(in), target, dimension(:) :: x An N-element array containing the relative position\ndata. real(kind=real64), intent(in), target, dimension(:) :: v An N-element array containing the relative velocity\ndata. real(kind=real64), intent(in), target, dimension(:) :: f An N-element array containing the friction force data. real(kind=real64), intent(in), target, dimension(:) :: n An N-element array containing the normal force data. real(kind=real64), intent(in), optional, dimension(:) :: weights An optional N-element array that can be used to\n weight specific data points.  The default is an array of \nall ones such that all points are weighted equally. real(kind=real64), intent(in), optional, dimension(:) :: maxp An M-element array (M = the number of model \nparameters) containing a maximum limit for each model \nparameter. real(kind=real64), intent(in), optional, dimension(:) :: minp An M-element array containing the minimum limit for\neach model parameter. real(kind=real64), intent(in), optional :: alpha An optional input that defines the significance \nlevel at which to evaluate the confidence intervals. The \ndefault value is 0.05 such that a 95% confidence interval \nis calculated. class(ode_integrator), intent(inout), optional, target :: integrator An optional input, used in the event the model has internal \nstate variables, that provides integration of the state \nequations.  The defaults is a singly diagonally implicit\nRunge-Kutta method (4th order) that is suitable for \nstiff ODE's. type(iteration_controls), intent(in), optional :: controls An optional input providing custom iteration controls. type(lm_solver_options), intent(in), optional :: settings An optional input providing custom settings for \nthe solver. type(convergence_info), intent(out), optional :: info An optional output that can be used to gain \ninformation about the iterative solution and the nature of \nthe convergence. type(regression_statistics), intent(out), optional, dimension(:) :: stats An optional output array of M-elements that can be\nused to retrieve statistical information regarding the fit of\neach of the M model parameters. real(kind=real64), intent(out), optional, target, dimension(:) :: fmod An optional N-element array used to provide the fitted model \nresults. real(kind=real64), intent(out), optional, target, dimension(:) :: resid An optional N-element array containing the fitted residuals. class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling. procedure, public :: from_array => cf_from_array interface private module subroutine cf_from_array(this, x, err) Converts an array into the parameters for the friction model. Arguments Type Intent Optional Attributes Name class( coulomb_model ), intent(inout) :: this The coulomb_model object. real(kind=real64), intent(in), dimension(:) :: x The array of parameters.  See parameter_count to \ndetermine the size of this array. class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling. procedure, public :: get_constraint_equation_count => fmdl_get_constraint_count interface private pure module function fmdl_get_constraint_count(this) result(rst) Gets the number of constraint equations the model requires to\nbe satisfied when fitting to data. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction model object. Return Value integer(kind=int32) The number of constraint equations. procedure, public :: get_state_variable_count => cf_get_state_var_count interface private pure module function cf_get_state_var_count(this) result(rst) Gets the number of internal state variables used by the model. Arguments Type Intent Optional Attributes Name class( coulomb_model ), intent(in) :: this The coulomb_model object. Return Value integer(kind=int32) The internal state variable count. procedure, public :: has_internal_state => cf_has_state_vars interface private pure module function cf_has_state_vars(this) result(rst) Returns a value stating if the model relies upon internal\nstate variables. Arguments Type Intent Optional Attributes Name class( coulomb_model ), intent(in) :: this The coulomb_model object. Return Value logical Returns true if the model utilizes internal state variables;\nelse, returns false. procedure, public :: parameter_count => cf_parameter_count interface private pure module function cf_parameter_count(this) result(rst) Gets the number of model parameters. Arguments Type Intent Optional Attributes Name class( coulomb_model ), intent(in) :: this The coulomb_model object. Return Value integer(kind=int32) The number of model parameters. procedure, public :: state => cf_state_model interface private module subroutine cf_state_model(this, t, x, dxdt, nrm, svars, dsdt) Evaluates the time derivatives of the internal friction state\nmodel. Arguments Type Intent Optional Attributes Name class( coulomb_model ), intent(inout) :: this The coulomb_model object. real(kind=real64), intent(in) :: t The current simulation time value. real(kind=real64), intent(in) :: x The current value of the relative position between\nthe contacting bodies. real(kind=real64), intent(in) :: dxdt The current value of the relative velocity between\nthe contacting bodies. real(kind=real64), intent(in) :: nrm The current normal force between the contacting \nbodies. real(kind=real64), intent(in), dimension(:) :: svars An N-element array containing any internal state\nvariables the model may rely upon. real(kind=real64), intent(out), dimension(:) :: dsdt An N-element array where the state variable \nderivatives are to be written. procedure, public :: to_array => cf_to_array interface private module subroutine cf_to_array(this, x, err) Converts the parameters of the friction model into an array. Arguments Type Intent Optional Attributes Name class( coulomb_model ), intent(in) :: this The coulomb_model object. real(kind=real64), intent(out), dimension(:) :: x The array used to store the parameters.  See @ref\nparameter_count to determine the size of this array. class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling.","tags":"","loc":"type/coulomb_model.html"},{"title":"friction_model â€“ FRICTION ","text":"type, public, abstract :: friction_model Defines a generic friction model. Contents Type-Bound Procedures constraint_equations evaluate fit from_array get_constraint_equation_count get_state_variable_count has_internal_state parameter_count state to_array Type-Bound Procedures procedure, public :: constraint_equations => fmdl_constraints interface private module subroutine fmdl_constraints(this, t, x, dxdt, nrm, f, rst) Overload this routine to establish constraings for the model to\nbe enforced as part of the fitting operation. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction_model object. real(kind=real64), intent(in), dimension(:) :: t An N-element array containing the time points at which the\ndata to be fit was sampled. real(kind=real64), intent(in), dimension(:) :: x An N-element array containing the relative motion data. real(kind=real64), intent(in), dimension(:) :: dxdt An N-element array containing the relative velocity data. real(kind=real64), intent(in), dimension(:) :: nrm An N-element array containing the normal force data. real(kind=real64), intent(in), dimension(:) :: f An N-element array containing the friction force data. real(kind=real64), intent(out), dimension(:) :: rst An M-element array where the results of the constraint \nequations will be written.  M must be equal to the \nnumber of constraint equations for the model. procedure(friction_evaluation), public, deferred :: evaluate function friction_evaluation(this, t, x, dxdt, nrm, svars) result(rst) Prototype Arguments Type Intent Optional Attributes Name class( friction_model ), intent(inout) :: this The friction_model object. real(kind=real64), intent(in) :: t The current simulation time value. real(kind=real64), intent(in) :: x The current value of the relative position between\nthe contacting bodies. real(kind=real64), intent(in) :: dxdt The current value of the relative velocity between\nthe contacting bodies. real(kind=real64), intent(in) :: nrm The current normal force between the contacting \nbodies. real(kind=real64), intent(in), optional, dimension(:) :: svars An optional array containing any internal state\nvariables the model may rely upon. Return Value real(kind=real64) The friction force. procedure, public :: fit => fmdl_fit interface private module subroutine fmdl_fit(this, t, x, v, f, n, weights, maxp, minp, alpha, integrator, controls, settings, info, stats, fmod, resid, err) Attempts to fit a friction model to the supplied data using a \nLevenberg-Marquardt solver. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(inout), target :: this The friction model.  On output, the model is updated with the\nfinal, fitted parameters. real(kind=real64), intent(in), target, dimension(:) :: t An N-element array containing the time points at which\nthe friction data was sampled.  This array must contain \nmonotonically increasing data. real(kind=real64), intent(in), target, dimension(:) :: x An N-element array containing the relative position\ndata. real(kind=real64), intent(in), target, dimension(:) :: v An N-element array containing the relative velocity\ndata. real(kind=real64), intent(in), target, dimension(:) :: f An N-element array containing the friction force data. real(kind=real64), intent(in), target, dimension(:) :: n An N-element array containing the normal force data. real(kind=real64), intent(in), optional, dimension(:) :: weights An optional N-element array that can be used to\n weight specific data points.  The default is an array of \nall ones such that all points are weighted equally. real(kind=real64), intent(in), optional, dimension(:) :: maxp An M-element array (M = the number of model \nparameters) containing a maximum limit for each model \nparameter. real(kind=real64), intent(in), optional, dimension(:) :: minp An M-element array containing the minimum limit for\neach model parameter. real(kind=real64), intent(in), optional :: alpha An optional input that defines the significance \nlevel at which to evaluate the confidence intervals. The \ndefault value is 0.05 such that a 95% confidence interval \nis calculated. class(ode_integrator), intent(inout), optional, target :: integrator An optional input, used in the event the model has internal \nstate variables, that provides integration of the state \nequations.  The defaults is a singly diagonally implicit\nRunge-Kutta method (4th order) that is suitable for \nstiff ODE's. type(iteration_controls), intent(in), optional :: controls An optional input providing custom iteration controls. type(lm_solver_options), intent(in), optional :: settings An optional input providing custom settings for \nthe solver. type(convergence_info), intent(out), optional :: info An optional output that can be used to gain \ninformation about the iterative solution and the nature of \nthe convergence. type(regression_statistics), intent(out), optional, dimension(:) :: stats An optional output array of M-elements that can be\nused to retrieve statistical information regarding the fit of\neach of the M model parameters. real(kind=real64), intent(out), optional, target, dimension(:) :: fmod An optional N-element array used to provide the fitted model \nresults. real(kind=real64), intent(out), optional, target, dimension(:) :: resid An optional N-element array containing the fitted residuals. class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling. procedure(friction_model_from_array), public, deferred :: from_array subroutine friction_model_from_array(this, x, err) Prototype Converts an array into the parameters for the friction model. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(inout) :: this The friction_model object. real(kind=real64), intent(in), dimension(:) :: x The array of parameters.  See parameter_count to \ndetermine the size of this array. class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling. procedure, public :: get_constraint_equation_count => fmdl_get_constraint_count interface private pure module function fmdl_get_constraint_count(this) result(rst) Gets the number of constraint equations the model requires to\nbe satisfied when fitting to data. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction model object. Return Value integer(kind=int32) The number of constraint equations. procedure(friction_integer_query), public, deferred :: get_state_variable_count pure function friction_integer_query(this) result(rst) Prototype Gets an integer-valued parameter from the model Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction_model object. Return Value integer(kind=int32) The model parameter. procedure(friction_logical_query), public, deferred :: has_internal_state pure function friction_logical_query(this) result(rst) Prototype Returns a value stating if the model relies upon internal\nstate variables. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction_model object. Return Value logical Returns true if the model utilizes internal state variables;\nelse, returns false. procedure(friction_integer_query), public, deferred :: parameter_count pure function friction_integer_query(this) result(rst) Prototype Gets an integer-valued parameter from the model Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction_model object. Return Value integer(kind=int32) The model parameter. procedure(friction_state_model), public, deferred :: state subroutine friction_state_model(this, t, x, dxdt, nrm, svars, dsdt) Prototype Evaluates the time derivatives of the internal friction state\nmodel. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(inout) :: this The friction_model object. real(kind=real64), intent(in) :: t The current simulation time value. real(kind=real64), intent(in) :: x The current value of the relative position between\nthe contacting bodies. real(kind=real64), intent(in) :: dxdt The current value of the relative velocity between\nthe contacting bodies. real(kind=real64), intent(in) :: nrm The current normal force between the contacting \nbodies. real(kind=real64), intent(in), dimension(:) :: svars An N-element array containing any internal state\nvariables the model may rely upon. real(kind=real64), intent(out), dimension(:) :: dsdt An N-element array where the state variable \nderivatives are to be written. procedure(friction_model_to_array), public, deferred :: to_array subroutine friction_model_to_array(this, x, err) Prototype Converts the parameters of the friction model into an array. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction_model object. real(kind=real64), intent(out), dimension(:) :: x The array used to store the parameters.  See @ref\nparameter_count to determine the size of this array. class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling.","tags":"","loc":"type/friction_model.html"},{"title":"generalized_maxwell_slip_model â€“ FRICTION ","text":"type, public, extends( friction_model ) :: generalized_maxwell_slip_model A representation of the Generalized Maxwell Slip model. The Generalized Maxwell Slip model is defined as follows. where: Friction Force Normal Force Attraction Coefficient Position Velocity Coulomb Friction Coefficient Static Friction Coefficient i-th Element Stiffness i-th Element Damping Coefficient Viscous Damping Coefficient Frictional Stiffness Stribeck Curve Shape Factor Stribeck Velocity Coefficient i-th Element Scaling Factor Contents Variables attraction_coefficient coulomb_coefficient shape_parameter static_coefficient stiffness stribeck_velocity viscous_damping Type-Bound Procedures constraint_equations element_state evaluate fit from_array get_constraint_equation_count get_element_count get_element_damping get_element_scaling get_element_stiffness get_state_variable_count has_internal_state initialize parameter_count set_element_damping set_element_scaling set_element_stiffness state stribeck_function to_array Components Type Visibility Attributes Name Initial real(kind=real64), public :: attraction_coefficient The attraction coefficient. real(kind=real64), public :: coulomb_coefficient The Coulomb (dynamic) friction coefficient. real(kind=real64), public :: shape_parameter The Stribeck curve shape parameter. real(kind=real64), public :: static_coefficient The static friction coefficient. real(kind=real64), public :: stiffness The frictional stiffness. real(kind=real64), public :: stribeck_velocity The Stribeck velocity parameter. real(kind=real64), public :: viscous_damping The viscous damping coefficient. Type-Bound Procedures procedure, public :: constraint_equations => fmdl_constraints interface private module subroutine fmdl_constraints(this, t, x, dxdt, nrm, f, rst) Overload this routine to establish constraings for the model to\nbe enforced as part of the fitting operation. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction_model object. real(kind=real64), intent(in), dimension(:) :: t An N-element array containing the time points at which the\ndata to be fit was sampled. real(kind=real64), intent(in), dimension(:) :: x An N-element array containing the relative motion data. real(kind=real64), intent(in), dimension(:) :: dxdt An N-element array containing the relative velocity data. real(kind=real64), intent(in), dimension(:) :: nrm An N-element array containing the normal force data. real(kind=real64), intent(in), dimension(:) :: f An N-element array containing the friction force data. real(kind=real64), intent(out), dimension(:) :: rst An M-element array where the results of the constraint \nequations will be written.  M must be equal to the \nnumber of constraint equations for the model. procedure, public :: element_state => gmsm_element_state_model interface private pure module function gmsm_element_state_model(this, i, t, x, dxdt, nrm, z) result(rst) Computes the state equation for a single element. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(in) :: this The generalized_maxwell_slip_model object. integer(kind=int32), intent(in) :: i The index of the element. real(kind=real64), intent(in) :: t The current simulation time value. real(kind=real64), intent(in) :: x The current value of the relative position between\nthe contacting bodies. real(kind=real64), intent(in) :: dxdt The current value of the relative velocity between\nthe contacting bodies. real(kind=real64), intent(in) :: nrm The current normal force between the contacting \nbodies. real(kind=real64), intent(in) :: z The current value of the state variable for the element. Return Value real(kind=real64) The value of the state equation. procedure, public :: evaluate => gmsm_eval interface private module function gmsm_eval(this, t, x, dxdt, nrm, svars) result(rst) Evaluates the friction model given the defined parameter\nstate. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(inout) :: this The generalized_maxwell_slip_model object. real(kind=real64), intent(in) :: t The current simulation time value. real(kind=real64), intent(in) :: x The current value of the relative position between\nthe contacting bodies. real(kind=real64), intent(in) :: dxdt The current value of the relative velocity between\nthe contacting bodies. real(kind=real64), intent(in) :: nrm The current normal force between the contacting \nbodies. real(kind=real64), intent(in), optional, dimension(:) :: svars An optional array containing any internal state\nvariables the model may rely upon. Return Value real(kind=real64) The friction force. procedure, public :: fit => fmdl_fit interface private module subroutine fmdl_fit(this, t, x, v, f, n, weights, maxp, minp, alpha, integrator, controls, settings, info, stats, fmod, resid, err) Attempts to fit a friction model to the supplied data using a \nLevenberg-Marquardt solver. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(inout), target :: this The friction model.  On output, the model is updated with the\nfinal, fitted parameters. real(kind=real64), intent(in), target, dimension(:) :: t An N-element array containing the time points at which\nthe friction data was sampled.  This array must contain \nmonotonically increasing data. real(kind=real64), intent(in), target, dimension(:) :: x An N-element array containing the relative position\ndata. real(kind=real64), intent(in), target, dimension(:) :: v An N-element array containing the relative velocity\ndata. real(kind=real64), intent(in), target, dimension(:) :: f An N-element array containing the friction force data. real(kind=real64), intent(in), target, dimension(:) :: n An N-element array containing the normal force data. real(kind=real64), intent(in), optional, dimension(:) :: weights An optional N-element array that can be used to\n weight specific data points.  The default is an array of \nall ones such that all points are weighted equally. real(kind=real64), intent(in), optional, dimension(:) :: maxp An M-element array (M = the number of model \nparameters) containing a maximum limit for each model \nparameter. real(kind=real64), intent(in), optional, dimension(:) :: minp An M-element array containing the minimum limit for\neach model parameter. real(kind=real64), intent(in), optional :: alpha An optional input that defines the significance \nlevel at which to evaluate the confidence intervals. The \ndefault value is 0.05 such that a 95% confidence interval \nis calculated. class(ode_integrator), intent(inout), optional, target :: integrator An optional input, used in the event the model has internal \nstate variables, that provides integration of the state \nequations.  The defaults is a singly diagonally implicit\nRunge-Kutta method (4th order) that is suitable for \nstiff ODE's. type(iteration_controls), intent(in), optional :: controls An optional input providing custom iteration controls. type(lm_solver_options), intent(in), optional :: settings An optional input providing custom settings for \nthe solver. type(convergence_info), intent(out), optional :: info An optional output that can be used to gain \ninformation about the iterative solution and the nature of \nthe convergence. type(regression_statistics), intent(out), optional, dimension(:) :: stats An optional output array of M-elements that can be\nused to retrieve statistical information regarding the fit of\neach of the M model parameters. real(kind=real64), intent(out), optional, target, dimension(:) :: fmod An optional N-element array used to provide the fitted model \nresults. real(kind=real64), intent(out), optional, target, dimension(:) :: resid An optional N-element array containing the fitted residuals. class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling. procedure, public :: from_array => gmsm_from_array interface private module subroutine gmsm_from_array(this, x, err) Converts an array into the parameters for the friction model. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(inout) :: this The generalized_maxwell_slip_model object. real(kind=real64), intent(in), dimension(:) :: x The array of parameters.  See parameter_count to \ndetermine the size of this array. The parameter order is as \nfollows: static_coefficient coulomb_coefficient attraction_coefficient stiffness viscous_damping stribeck_velocity shape_parameter element stiffness element damping element scaling ... class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling. procedure, public :: get_constraint_equation_count => gmsm_get_constraint_count interface private pure module function gmsm_get_constraint_count(this) result(rst) Gets the number of constraint equations the model requires to\nbe satisfied when fitting to data. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(in) :: this The generalized_maxwell_slip_model object. Return Value integer(kind=int32) The number of constraint equations. procedure, public :: get_element_count => gmsm_get_element_count interface private pure module function gmsm_get_element_count(this) result(rst) Gets the number of friction elements in the model. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(in) :: this The generalized_maxwell_slip_model object. Return Value integer(kind=int32) The number of friction elements in the model. procedure, public :: get_element_damping => gmsm_get_element_damping interface private pure module function gmsm_get_element_damping(this, i) result(rst) Gets the damping term for the specified element. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(in) :: this The generalized_maxwell_slip_model object. integer(kind=int32), intent(in) :: i The index of the element. Return Value real(kind=real64) The requested value. procedure, public :: get_element_scaling => gmsm_get_element_scaling interface private pure module function gmsm_get_element_scaling(this, i) result(rst) Gets the scaling factor for the specified element. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(in) :: this The generalized_maxwell_slip_model object. integer(kind=int32), intent(in) :: i The index of the element. Return Value real(kind=real64) The requested value. procedure, public :: get_element_stiffness => gmsm_get_element_stiffness interface private pure module function gmsm_get_element_stiffness(this, i) result(rst) Gets the stiffness term for the specified element. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(in) :: this The generalized_maxwell_slip_model object. integer(kind=int32), intent(in) :: i The index of the element. Return Value real(kind=real64) The requested value. procedure, public :: get_state_variable_count => gmsm_get_state_var_count interface private pure module function gmsm_get_state_var_count(this) result(rst) Gets the number of internal state variables used by the model. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(in) :: this The generalized_maxwell_slip_model object. Return Value integer(kind=int32) The internal state variable count. procedure, public :: has_internal_state => gmsm_has_state_vars interface private pure module function gmsm_has_state_vars(this) result(rst) Returns a value stating if the model relies upon internal\nstate variables. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(in) :: this The generalized_maxwell_slip_model object. Return Value logical Returns true if the model utilizes internal state variables;\nelse, returns false. procedure, public :: initialize => gmsm_initialize interface private module subroutine gmsm_initialize(this, n, err) Initializes the model. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(inout) :: this The generalized_maxwell_slip_model object. integer(kind=int32), intent(in) :: n The number of friction elements.  This value must be at\nleast 1. class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling. procedure, public :: parameter_count => gmsm_parameter_count interface private pure module function gmsm_parameter_count(this) result(rst) Gets the number of model parameters. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(in) :: this The generalized_maxwell_slip_model object. Return Value integer(kind=int32) The number of model parameters. procedure, public :: set_element_damping => gmsm_set_element_damping interface private module function gmsm_set_element_damping(this, i, x) result(rst) Sets the damping term for the specified element. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(inout) :: this The generalized_maxwell_slip_model object. integer(kind=int32), intent(in) :: i The index of the element. real(kind=real64), intent(in) :: x The value. Return Value logical Returns true if the operation was successful; else, returns\nfalse if the object has not yet been initialized. procedure, public :: set_element_scaling => gmsm_set_element_scaling interface private module function gmsm_set_element_scaling(this, i, x) result(rst) Sets the scaling factor for the specified element. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(inout) :: this The generalized_maxwell_slip_model object. integer(kind=int32), intent(in) :: i The index of the element. real(kind=real64), intent(in) :: x The value. Return Value logical Returns true if the operation was successful; else, returns\nfalse if the object has not yet been initialized. procedure, public :: set_element_stiffness => gmsm_set_element_stiffness interface private module function gmsm_set_element_stiffness(this, i, x) result(rst) Sets the stiffness term for the specified element. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(inout) :: this The generalized_maxwell_slip_model object. integer(kind=int32), intent(in) :: i The index of the element. real(kind=real64), intent(in) :: x The value. Return Value logical Returns true if the operation was successful; else, returns\nfalse if the object has not yet been initialized. procedure, public :: state => gmsm_state_model interface private module subroutine gmsm_state_model(this, t, x, dxdt, nrm, svars, dsdt) Evaluates the time derivatives of the internal friction state\nmodel. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(inout) :: this The generalized_maxwell_slip_model object. real(kind=real64), intent(in) :: t The current simulation time value. real(kind=real64), intent(in) :: x The current value of the relative position between\nthe contacting bodies. real(kind=real64), intent(in) :: dxdt The current value of the relative velocity between\nthe contacting bodies. real(kind=real64), intent(in) :: nrm The current normal force between the contacting \nbodies. real(kind=real64), intent(in), dimension(:) :: svars An N-element array containing any internal state\nvariables the model may rely upon. real(kind=real64), intent(out), dimension(:) :: dsdt An N-element array where the state variable \nderivatives are to be written. procedure, public :: stribeck_function => gmsm_stribeck_curve interface private pure module function gmsm_stribeck_curve(this, dxdt, nrm) result(rst) Evaluates the Stribeck function for the model. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(in) :: this The generalized_maxwell_slip_model object. real(kind=real64), intent(in) :: dxdt The relative velocity between the contacting bodies. real(kind=real64), intent(in) :: nrm The normal force between the contacting bodies. Return Value real(kind=real64) The value of the Stribeck function.  The units are units of\nposition. procedure, public :: to_array => gmsm_to_array interface private module subroutine gmsm_to_array(this, x, err) Converts the parameters of the friction model into an array. Arguments Type Intent Optional Attributes Name class( generalized_maxwell_slip_model ), intent(in) :: this The generalized_maxwell_slip_model object. real(kind=real64), intent(out), dimension(:) :: x The array used to store the parameters.  See parameter_count \nto determine the size of this array.  The parameter order is \nas follows: static_coefficient coulomb_coefficient attraction_coefficient stiffness viscous_damping stribeck_velocity shape_parameter element stiffness element damping element scaling ... class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling.","tags":"","loc":"type/generalized_maxwell_slip_model.html"},{"title":"lugre_model â€“ FRICTION ","text":"type, public, extends( friction_model ) :: lugre_model Defines the Lu-Gre friction model. The Lu-Gre model is a bristle-type model that attempts to describe \nfriction using a bristle interpretation of the frictional surfaces. The bristle-type models assume that the frictional behavior is \nrepresented by an average deflection of elastic springs.  These \nsprings have their own stiffness and damping properties and act as a \ntypical spring-damper pair under small velocities; however, once \nsufficient velocity occurs, the bristles slip resulting in \nCoulomb-like sliding behavior. The Lu-Gre model is defined as follows. where: Friction Force Normal Force Velocity Coulomb Friction Coefficient Static Friction Coefficient Bristle Stiffness Bristle Damping Coefficient Viscous Damping Coefficient Stribeck Curve Shape Factor Stribeck Velocity Coefficient Contents Variables coulomb_coefficient damping shape_parameter static_coefficient stiffness stribeck_velocity viscous_damping Type-Bound Procedures constraint_equations evaluate fit from_array get_constraint_equation_count get_state_variable_count has_internal_state parameter_count state to_array Components Type Visibility Attributes Name Initial real(kind=real64), public :: coulomb_coefficient The Coulomb (dynamic) friction coefficient. real(kind=real64), public :: damping The bristle damping coefficient. real(kind=real64), public :: shape_parameter The Stribeck curve shape parameter. real(kind=real64), public :: static_coefficient The static friction coefficient. real(kind=real64), public :: stiffness The bristle stiffness. real(kind=real64), public :: stribeck_velocity The Stribeck velocity term. real(kind=real64), public :: viscous_damping The viscous damping coefficient. Type-Bound Procedures procedure, public :: constraint_equations => fmdl_constraints interface private module subroutine fmdl_constraints(this, t, x, dxdt, nrm, f, rst) Overload this routine to establish constraings for the model to\nbe enforced as part of the fitting operation. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction_model object. real(kind=real64), intent(in), dimension(:) :: t An N-element array containing the time points at which the\ndata to be fit was sampled. real(kind=real64), intent(in), dimension(:) :: x An N-element array containing the relative motion data. real(kind=real64), intent(in), dimension(:) :: dxdt An N-element array containing the relative velocity data. real(kind=real64), intent(in), dimension(:) :: nrm An N-element array containing the normal force data. real(kind=real64), intent(in), dimension(:) :: f An N-element array containing the friction force data. real(kind=real64), intent(out), dimension(:) :: rst An M-element array where the results of the constraint \nequations will be written.  M must be equal to the \nnumber of constraint equations for the model. procedure, public :: evaluate => lg_eval interface private module function lg_eval(this, t, x, dxdt, nrm, svars) result(rst) Arguments Type Intent Optional Attributes Name class( lugre_model ), intent(inout) :: this The lugre_model object. real(kind=real64), intent(in) :: t The current simulation time value. real(kind=real64), intent(in) :: x The current value of the relative position between\nthe contacting bodies. real(kind=real64), intent(in) :: dxdt The current value of the relative velocity between\nthe contacting bodies. real(kind=real64), intent(in) :: nrm The current normal force between the contacting \nbodies. real(kind=real64), intent(in), optional, dimension(:) :: svars An optional array containing any internal state\nvariables the model may rely upon. Return Value real(kind=real64) The friction force. procedure, public :: fit => fmdl_fit interface private module subroutine fmdl_fit(this, t, x, v, f, n, weights, maxp, minp, alpha, integrator, controls, settings, info, stats, fmod, resid, err) Attempts to fit a friction model to the supplied data using a \nLevenberg-Marquardt solver. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(inout), target :: this The friction model.  On output, the model is updated with the\nfinal, fitted parameters. real(kind=real64), intent(in), target, dimension(:) :: t An N-element array containing the time points at which\nthe friction data was sampled.  This array must contain \nmonotonically increasing data. real(kind=real64), intent(in), target, dimension(:) :: x An N-element array containing the relative position\ndata. real(kind=real64), intent(in), target, dimension(:) :: v An N-element array containing the relative velocity\ndata. real(kind=real64), intent(in), target, dimension(:) :: f An N-element array containing the friction force data. real(kind=real64), intent(in), target, dimension(:) :: n An N-element array containing the normal force data. real(kind=real64), intent(in), optional, dimension(:) :: weights An optional N-element array that can be used to\n weight specific data points.  The default is an array of \nall ones such that all points are weighted equally. real(kind=real64), intent(in), optional, dimension(:) :: maxp An M-element array (M = the number of model \nparameters) containing a maximum limit for each model \nparameter. real(kind=real64), intent(in), optional, dimension(:) :: minp An M-element array containing the minimum limit for\neach model parameter. real(kind=real64), intent(in), optional :: alpha An optional input that defines the significance \nlevel at which to evaluate the confidence intervals. The \ndefault value is 0.05 such that a 95% confidence interval \nis calculated. class(ode_integrator), intent(inout), optional, target :: integrator An optional input, used in the event the model has internal \nstate variables, that provides integration of the state \nequations.  The defaults is a singly diagonally implicit\nRunge-Kutta method (4th order) that is suitable for \nstiff ODE's. type(iteration_controls), intent(in), optional :: controls An optional input providing custom iteration controls. type(lm_solver_options), intent(in), optional :: settings An optional input providing custom settings for \nthe solver. type(convergence_info), intent(out), optional :: info An optional output that can be used to gain \ninformation about the iterative solution and the nature of \nthe convergence. type(regression_statistics), intent(out), optional, dimension(:) :: stats An optional output array of M-elements that can be\nused to retrieve statistical information regarding the fit of\neach of the M model parameters. real(kind=real64), intent(out), optional, target, dimension(:) :: fmod An optional N-element array used to provide the fitted model \nresults. real(kind=real64), intent(out), optional, target, dimension(:) :: resid An optional N-element array containing the fitted residuals. class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling. procedure, public :: from_array => lg_from_array interface private module subroutine lg_from_array(this, x, err) Converts an array into the parameters for the friction model. Arguments Type Intent Optional Attributes Name class( lugre_model ), intent(inout) :: this The lugre_model object. real(kind=real64), intent(in), dimension(:) :: x The array of parameters.  See parameter_count to \ndetermine the size of this array.  The parameter order is as \n follows: static_coefficient coulomb_coefficient stribeck_velocity stiffness damping viscous_damping shape_parameter class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling. procedure, public :: get_constraint_equation_count => fmdl_get_constraint_count interface private pure module function fmdl_get_constraint_count(this) result(rst) Gets the number of constraint equations the model requires to\nbe satisfied when fitting to data. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction model object. Return Value integer(kind=int32) The number of constraint equations. procedure, public :: get_state_variable_count => lg_get_state_var_count interface private pure module function lg_get_state_var_count(this) result(rst) Gets the number of internal state variables used by the model. Arguments Type Intent Optional Attributes Name class( lugre_model ), intent(in) :: this The lugre_model object. Return Value integer(kind=int32) The internal state variable count. procedure, public :: has_internal_state => lg_has_state_vars interface private pure module function lg_has_state_vars(this) result(rst) Returns a value stating if the model relies upon internal\nstate variables. Arguments Type Intent Optional Attributes Name class( lugre_model ), intent(in) :: this The lugre_model object. Return Value logical Returns true if the model utilizes internal state variables;\nelse, returns false. procedure, public :: parameter_count => lg_parameter_count interface private pure module function lg_parameter_count(this) result(rst) Gets the number of model parameters. Arguments Type Intent Optional Attributes Name class( lugre_model ), intent(in) :: this The lugre_model object. Return Value integer(kind=int32) The number of model parameters. procedure, public :: state => lg_state_model interface private module subroutine lg_state_model(this, t, x, dxdt, nrm, svars, dsdt) Arguments Type Intent Optional Attributes Name class( lugre_model ), intent(inout) :: this The lugre_model object. real(kind=real64), intent(in) :: t The current simulation time value. real(kind=real64), intent(in) :: x The current value of the relative position between\nthe contacting bodies. real(kind=real64), intent(in) :: dxdt The current value of the relative velocity between\nthe contacting bodies. real(kind=real64), intent(in) :: nrm The current normal force between the contacting \nbodies. real(kind=real64), intent(in), dimension(:) :: svars An N-element array containing any internal state\nvariables the model may rely upon. real(kind=real64), intent(out), dimension(:) :: dsdt An N-element array where the state variable \nderivatives are to be written. procedure, public :: to_array => lg_to_array interface private module subroutine lg_to_array(this, x, err) Converts the parameters of the friction model into an array. Arguments Type Intent Optional Attributes Name class( lugre_model ), intent(in) :: this The lugre_model object. real(kind=real64), intent(out), dimension(:) :: x The array used to store the parameters.  See @ref\nparameter_count to determine the size of this array.  The \nparameter order is as follows: static_coefficient coulomb_coefficient stribeck_velocity stiffness damping viscous_damping shape_parameter class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling.","tags":"","loc":"type/lugre_model.html"},{"title":"maxwell_model â€“ FRICTION ","text":"type, public, extends( friction_model ) :: maxwell_model Defines a single-element, Maxwell model. The signle-element, Maxwell model is defined as follows. where: Friction Force Normal Force Position Coulomb Friction Coefficient Stiffness Contents Variables friction_coefficient stiffness Type-Bound Procedures constraint_equations evaluate fit from_array get_constraint_equation_count get_state_variable_count has_internal_state parameter_count state to_array Components Type Visibility Attributes Name Initial real(kind=real64), public :: friction_coefficient The Coulomb friction coefficient. real(kind=real64), public :: stiffness The pre-sliding stiffness term. Type-Bound Procedures procedure, public :: constraint_equations => fmdl_constraints interface private module subroutine fmdl_constraints(this, t, x, dxdt, nrm, f, rst) Overload this routine to establish constraings for the model to\nbe enforced as part of the fitting operation. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction_model object. real(kind=real64), intent(in), dimension(:) :: t An N-element array containing the time points at which the\ndata to be fit was sampled. real(kind=real64), intent(in), dimension(:) :: x An N-element array containing the relative motion data. real(kind=real64), intent(in), dimension(:) :: dxdt An N-element array containing the relative velocity data. real(kind=real64), intent(in), dimension(:) :: nrm An N-element array containing the normal force data. real(kind=real64), intent(in), dimension(:) :: f An N-element array containing the friction force data. real(kind=real64), intent(out), dimension(:) :: rst An M-element array where the results of the constraint \nequations will be written.  M must be equal to the \nnumber of constraint equations for the model. procedure, public :: evaluate => mx_eval interface private module function mx_eval(this, t, x, dxdt, nrm, svars) result(rst) Evaluates the friction model given the defined parameter\nstate. Arguments Type Intent Optional Attributes Name class( maxwell_model ), intent(inout) :: this The maxwell_model object. real(kind=real64), intent(in) :: t The current simulation time value. real(kind=real64), intent(in) :: x The current value of the relative position between\nthe contacting bodies. real(kind=real64), intent(in) :: dxdt The current value of the relative velocity between\nthe contacting bodies. real(kind=real64), intent(in) :: nrm The current normal force between the contacting \nbodies. real(kind=real64), intent(in), optional, dimension(:) :: svars An optional array containing any internal state\nvariables the model may rely upon. Return Value real(kind=real64) The friction force. procedure, public :: fit => fmdl_fit interface private module subroutine fmdl_fit(this, t, x, v, f, n, weights, maxp, minp, alpha, integrator, controls, settings, info, stats, fmod, resid, err) Attempts to fit a friction model to the supplied data using a \nLevenberg-Marquardt solver. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(inout), target :: this The friction model.  On output, the model is updated with the\nfinal, fitted parameters. real(kind=real64), intent(in), target, dimension(:) :: t An N-element array containing the time points at which\nthe friction data was sampled.  This array must contain \nmonotonically increasing data. real(kind=real64), intent(in), target, dimension(:) :: x An N-element array containing the relative position\ndata. real(kind=real64), intent(in), target, dimension(:) :: v An N-element array containing the relative velocity\ndata. real(kind=real64), intent(in), target, dimension(:) :: f An N-element array containing the friction force data. real(kind=real64), intent(in), target, dimension(:) :: n An N-element array containing the normal force data. real(kind=real64), intent(in), optional, dimension(:) :: weights An optional N-element array that can be used to\n weight specific data points.  The default is an array of \nall ones such that all points are weighted equally. real(kind=real64), intent(in), optional, dimension(:) :: maxp An M-element array (M = the number of model \nparameters) containing a maximum limit for each model \nparameter. real(kind=real64), intent(in), optional, dimension(:) :: minp An M-element array containing the minimum limit for\neach model parameter. real(kind=real64), intent(in), optional :: alpha An optional input that defines the significance \nlevel at which to evaluate the confidence intervals. The \ndefault value is 0.05 such that a 95% confidence interval \nis calculated. class(ode_integrator), intent(inout), optional, target :: integrator An optional input, used in the event the model has internal \nstate variables, that provides integration of the state \nequations.  The defaults is a singly diagonally implicit\nRunge-Kutta method (4th order) that is suitable for \nstiff ODE's. type(iteration_controls), intent(in), optional :: controls An optional input providing custom iteration controls. type(lm_solver_options), intent(in), optional :: settings An optional input providing custom settings for \nthe solver. type(convergence_info), intent(out), optional :: info An optional output that can be used to gain \ninformation about the iterative solution and the nature of \nthe convergence. type(regression_statistics), intent(out), optional, dimension(:) :: stats An optional output array of M-elements that can be\nused to retrieve statistical information regarding the fit of\neach of the M model parameters. real(kind=real64), intent(out), optional, target, dimension(:) :: fmod An optional N-element array used to provide the fitted model \nresults. real(kind=real64), intent(out), optional, target, dimension(:) :: resid An optional N-element array containing the fitted residuals. class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling. procedure, public :: from_array => mx_from_array interface private module subroutine mx_from_array(this, x, err) Converts an array into the parameters for the friction model. Arguments Type Intent Optional Attributes Name class( maxwell_model ), intent(inout) :: this The maxwell_model object. real(kind=real64), intent(in), dimension(:) :: x The array of parameters.  See parameter_count \nto determine the size of this array.  The parameter order is\nas follows. stiffness friction_coefficient class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling. procedure, public :: get_constraint_equation_count => fmdl_get_constraint_count interface private pure module function fmdl_get_constraint_count(this) result(rst) Gets the number of constraint equations the model requires to\nbe satisfied when fitting to data. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction model object. Return Value integer(kind=int32) The number of constraint equations. procedure, public :: get_state_variable_count => mx_get_state_var_count interface private pure module function mx_get_state_var_count(this) result(rst) Gets the number of internal state variables used by the model. Arguments Type Intent Optional Attributes Name class( maxwell_model ), intent(in) :: this The maxwell_model object. Return Value integer(kind=int32) The internal state variable count. procedure, public :: has_internal_state => mx_has_state_vars interface private pure module function mx_has_state_vars(this) result(rst) Returns a value stating if the model relies upon internal\nstate variables. Arguments Type Intent Optional Attributes Name class( maxwell_model ), intent(in) :: this The maxwell_model object. Return Value logical Returns true if the model utilizes internal state variables;\nelse, returns false. procedure, public :: parameter_count => mx_parameter_count interface private pure module function mx_parameter_count(this) result(rst) Gets the number of model parameters. Arguments Type Intent Optional Attributes Name class( maxwell_model ), intent(in) :: this The maxwell_model object. Return Value integer(kind=int32) The number of model parameters. procedure, public :: state => mx_state_model interface private module subroutine mx_state_model(this, t, x, dxdt, nrm, svars, dsdt) Evaluates the time derivatives of the internal friction state\nmodel. Arguments Type Intent Optional Attributes Name class( maxwell_model ), intent(inout) :: this The maxwell_model object. real(kind=real64), intent(in) :: t The current simulation time value. real(kind=real64), intent(in) :: x The current value of the relative position between\nthe contacting bodies. real(kind=real64), intent(in) :: dxdt The current value of the relative velocity between\nthe contacting bodies. real(kind=real64), intent(in) :: nrm The current normal force between the contacting \nbodies. real(kind=real64), intent(in), dimension(:) :: svars An N-element array containing any internal state\nvariables the model may rely upon. real(kind=real64), intent(out), dimension(:) :: dsdt An N-element array where the state variable \nderivatives are to be written. procedure, public :: to_array => mx_to_array interface private module subroutine mx_to_array(this, x, err) Converts the parameters of the friction model into an array. Arguments Type Intent Optional Attributes Name class( maxwell_model ), intent(in) :: this The maxwell_model object. real(kind=real64), intent(out), dimension(:) :: x The array used to store the parameters.  See parameter_count \nto determine the size of this array.  The parameter order is\nas follows. stiffness friction_coefficient class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling.","tags":"","loc":"type/maxwell_model.html"},{"title":"modified_stribeck_model â€“ FRICTION ","text":"type, public, extends( stribeck_model ) :: modified_stribeck_model Defines a modification of the Stribeck model to account for \npresliding displacement.  The presliding region utilizes a Maxwell\ntype model then transitions to a traditional Stribeck model as\nslipping occurs. The model is defined as follows. where: Friction Force Normal Force Velocity Coulomb Friction Coefficient Static Friction Coefficient Stiffness Stribeck Velocity Coefficient Contents Variables coulomb_friction_coefficient static_friction_coefficient stiffness stribeck_velocity viscous_damping Type-Bound Procedures constraint_equations evaluate fit from_array get_constraint_equation_count get_state_variable_count has_internal_state parameter_count state to_array Components Type Visibility Attributes Name Initial real(kind=real64), public :: coulomb_friction_coefficient real(kind=real64), public :: static_friction_coefficient real(kind=real64), public :: stiffness The stiffness term. real(kind=real64), public :: stribeck_velocity real(kind=real64), public :: viscous_damping Type-Bound Procedures procedure, public :: constraint_equations => fmdl_constraints interface private module subroutine fmdl_constraints(this, t, x, dxdt, nrm, f, rst) Overload this routine to establish constraings for the model to\nbe enforced as part of the fitting operation. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction_model object. real(kind=real64), intent(in), dimension(:) :: t An N-element array containing the time points at which the\ndata to be fit was sampled. real(kind=real64), intent(in), dimension(:) :: x An N-element array containing the relative motion data. real(kind=real64), intent(in), dimension(:) :: dxdt An N-element array containing the relative velocity data. real(kind=real64), intent(in), dimension(:) :: nrm An N-element array containing the normal force data. real(kind=real64), intent(in), dimension(:) :: f An N-element array containing the friction force data. real(kind=real64), intent(out), dimension(:) :: rst An M-element array where the results of the constraint \nequations will be written.  M must be equal to the \nnumber of constraint equations for the model. procedure, public :: evaluate => msf_eval interface private module function msf_eval(this, t, x, dxdt, nrm, svars) result(rst) Evaluates the friction model given the defined parameter\nstate. Arguments Type Intent Optional Attributes Name class( modified_stribeck_model ), intent(inout) :: this The modified_stribeck_model object. real(kind=real64), intent(in) :: t The current simulation time value. real(kind=real64), intent(in) :: x The current value of the relative position between\nthe contacting bodies. real(kind=real64), intent(in) :: dxdt The current value of the relative velocity between\nthe contacting bodies. real(kind=real64), intent(in) :: nrm The current normal force between the contacting \nbodies. real(kind=real64), intent(in), optional, dimension(:) :: svars An optional array containing any internal state\nvariables the model may rely upon. Return Value real(kind=real64) The friction force. procedure, public :: fit => fmdl_fit interface private module subroutine fmdl_fit(this, t, x, v, f, n, weights, maxp, minp, alpha, integrator, controls, settings, info, stats, fmod, resid, err) Attempts to fit a friction model to the supplied data using a \nLevenberg-Marquardt solver. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(inout), target :: this The friction model.  On output, the model is updated with the\nfinal, fitted parameters. real(kind=real64), intent(in), target, dimension(:) :: t An N-element array containing the time points at which\nthe friction data was sampled.  This array must contain \nmonotonically increasing data. real(kind=real64), intent(in), target, dimension(:) :: x An N-element array containing the relative position\ndata. real(kind=real64), intent(in), target, dimension(:) :: v An N-element array containing the relative velocity\ndata. real(kind=real64), intent(in), target, dimension(:) :: f An N-element array containing the friction force data. real(kind=real64), intent(in), target, dimension(:) :: n An N-element array containing the normal force data. real(kind=real64), intent(in), optional, dimension(:) :: weights An optional N-element array that can be used to\n weight specific data points.  The default is an array of \nall ones such that all points are weighted equally. real(kind=real64), intent(in), optional, dimension(:) :: maxp An M-element array (M = the number of model \nparameters) containing a maximum limit for each model \nparameter. real(kind=real64), intent(in), optional, dimension(:) :: minp An M-element array containing the minimum limit for\neach model parameter. real(kind=real64), intent(in), optional :: alpha An optional input that defines the significance \nlevel at which to evaluate the confidence intervals. The \ndefault value is 0.05 such that a 95% confidence interval \nis calculated. class(ode_integrator), intent(inout), optional, target :: integrator An optional input, used in the event the model has internal \nstate variables, that provides integration of the state \nequations.  The defaults is a singly diagonally implicit\nRunge-Kutta method (4th order) that is suitable for \nstiff ODE's. type(iteration_controls), intent(in), optional :: controls An optional input providing custom iteration controls. type(lm_solver_options), intent(in), optional :: settings An optional input providing custom settings for \nthe solver. type(convergence_info), intent(out), optional :: info An optional output that can be used to gain \ninformation about the iterative solution and the nature of \nthe convergence. type(regression_statistics), intent(out), optional, dimension(:) :: stats An optional output array of M-elements that can be\nused to retrieve statistical information regarding the fit of\neach of the M model parameters. real(kind=real64), intent(out), optional, target, dimension(:) :: fmod An optional N-element array used to provide the fitted model \nresults. real(kind=real64), intent(out), optional, target, dimension(:) :: resid An optional N-element array containing the fitted residuals. class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling. procedure, public :: from_array => msf_from_array interface private module subroutine msf_from_array(this, x, err) Converts an array into the parameters for the friction model. Arguments Type Intent Optional Attributes Name class( modified_stribeck_model ), intent(inout) :: this The modified_stribeck_model object. real(kind=real64), intent(in), dimension(:) :: x The array of parameters.  See parameter_count \nto determine the size of this array.  The parameter order is\nas follows. static_friction_coefficient coulomb_friction_coefficient stribeck_velocity viscous_damping stiffness class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling. procedure, public :: get_constraint_equation_count => fmdl_get_constraint_count interface private pure module function fmdl_get_constraint_count(this) result(rst) Gets the number of constraint equations the model requires to\nbe satisfied when fitting to data. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction model object. Return Value integer(kind=int32) The number of constraint equations. procedure, public :: get_state_variable_count => sf_get_state_var_count interface private pure module function sf_get_state_var_count(this) result(rst) Gets the number of internal state variables used by the model. Arguments Type Intent Optional Attributes Name class( stribeck_model ), intent(in) :: this The stribeck_model object. Return Value integer(kind=int32) The internal state variable count. procedure, public :: has_internal_state => sf_has_state_vars interface private pure module function sf_has_state_vars(this) result(rst) Returns a value stating if the model relies upon internal\nstate variables. Arguments Type Intent Optional Attributes Name class( stribeck_model ), intent(in) :: this The stribeck_model object. Return Value logical Returns true if the model utilizes internal state variables;\nelse, returns false. procedure, public :: parameter_count => msf_parameter_count interface private pure module function msf_parameter_count(this) result(rst) Gets the number of model parameters. Arguments Type Intent Optional Attributes Name class( modified_stribeck_model ), intent(in) :: this The modified_stribeck_model object. Return Value integer(kind=int32) The number of model parameters. procedure, public :: state => sf_state_model interface private module subroutine sf_state_model(this, t, x, dxdt, nrm, svars, dsdt) Evaluates the time derivatives of the internal friction state\nmodel. Arguments Type Intent Optional Attributes Name class( stribeck_model ), intent(inout) :: this The stribeck_model object. real(kind=real64), intent(in) :: t The current simulation time value. real(kind=real64), intent(in) :: x The current value of the relative position between\nthe contacting bodies. real(kind=real64), intent(in) :: dxdt The current value of the relative velocity between\nthe contacting bodies. real(kind=real64), intent(in) :: nrm The current normal force between the contacting \nbodies. real(kind=real64), intent(in), dimension(:) :: svars An N-element array containing any internal state\nvariables the model may rely upon. real(kind=real64), intent(out), dimension(:) :: dsdt An N-element array where the state variable \nderivatives are to be written. procedure, public :: to_array => msf_to_array interface private module subroutine msf_to_array(this, x, err) Converts the parameters of the friction model into an array. Arguments Type Intent Optional Attributes Name class( modified_stribeck_model ), intent(in) :: this The modified_stribeck_model object. real(kind=real64), intent(out), dimension(:) :: x The array used to store the parameters.  See parameter_count \nto determine the size of this array.  The parameter order is\nas follows. static_friction_coefficient coulomb_friction_coefficient stribeck_velocity viscous_damping stiffness class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling.","tags":"","loc":"type/modified_stribeck_model.html"},{"title":"stribeck_model â€“ FRICTION ","text":"type, public, extends( friction_model ) :: stribeck_model This type defines a basic Stribeck-based friction model. This model is defined as follows. where: Friction Force Normal Force Position Velocity Coulomb Friction Coefficient Static Friction Coefficient Viscous Damping Coefficient Stribeck Velocity Coefficient Contents Variables coulomb_friction_coefficient static_friction_coefficient stribeck_velocity viscous_damping Type-Bound Procedures constraint_equations evaluate fit from_array get_constraint_equation_count get_state_variable_count has_internal_state parameter_count state to_array Components Type Visibility Attributes Name Initial real(kind=real64), public :: coulomb_friction_coefficient real(kind=real64), public :: static_friction_coefficient real(kind=real64), public :: stribeck_velocity real(kind=real64), public :: viscous_damping Type-Bound Procedures procedure, public :: constraint_equations => fmdl_constraints interface private module subroutine fmdl_constraints(this, t, x, dxdt, nrm, f, rst) Overload this routine to establish constraings for the model to\nbe enforced as part of the fitting operation. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction_model object. real(kind=real64), intent(in), dimension(:) :: t An N-element array containing the time points at which the\ndata to be fit was sampled. real(kind=real64), intent(in), dimension(:) :: x An N-element array containing the relative motion data. real(kind=real64), intent(in), dimension(:) :: dxdt An N-element array containing the relative velocity data. real(kind=real64), intent(in), dimension(:) :: nrm An N-element array containing the normal force data. real(kind=real64), intent(in), dimension(:) :: f An N-element array containing the friction force data. real(kind=real64), intent(out), dimension(:) :: rst An M-element array where the results of the constraint \nequations will be written.  M must be equal to the \nnumber of constraint equations for the model. procedure, public :: evaluate => sf_eval interface private module function sf_eval(this, t, x, dxdt, nrm, svars) result(rst) Evaluates the friction model given the defined parameter\nstate. Arguments Type Intent Optional Attributes Name class( stribeck_model ), intent(inout) :: this The stribeck_model object. real(kind=real64), intent(in) :: t The current simulation time value. real(kind=real64), intent(in) :: x The current value of the relative position between\nthe contacting bodies. real(kind=real64), intent(in) :: dxdt The current value of the relative velocity between\nthe contacting bodies. real(kind=real64), intent(in) :: nrm The current normal force between the contacting \nbodies. real(kind=real64), intent(in), optional, dimension(:) :: svars An optional array containing any internal state\nvariables the model may rely upon. Return Value real(kind=real64) The friction force. procedure, public :: fit => fmdl_fit interface private module subroutine fmdl_fit(this, t, x, v, f, n, weights, maxp, minp, alpha, integrator, controls, settings, info, stats, fmod, resid, err) Attempts to fit a friction model to the supplied data using a \nLevenberg-Marquardt solver. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(inout), target :: this The friction model.  On output, the model is updated with the\nfinal, fitted parameters. real(kind=real64), intent(in), target, dimension(:) :: t An N-element array containing the time points at which\nthe friction data was sampled.  This array must contain \nmonotonically increasing data. real(kind=real64), intent(in), target, dimension(:) :: x An N-element array containing the relative position\ndata. real(kind=real64), intent(in), target, dimension(:) :: v An N-element array containing the relative velocity\ndata. real(kind=real64), intent(in), target, dimension(:) :: f An N-element array containing the friction force data. real(kind=real64), intent(in), target, dimension(:) :: n An N-element array containing the normal force data. real(kind=real64), intent(in), optional, dimension(:) :: weights An optional N-element array that can be used to\n weight specific data points.  The default is an array of \nall ones such that all points are weighted equally. real(kind=real64), intent(in), optional, dimension(:) :: maxp An M-element array (M = the number of model \nparameters) containing a maximum limit for each model \nparameter. real(kind=real64), intent(in), optional, dimension(:) :: minp An M-element array containing the minimum limit for\neach model parameter. real(kind=real64), intent(in), optional :: alpha An optional input that defines the significance \nlevel at which to evaluate the confidence intervals. The \ndefault value is 0.05 such that a 95% confidence interval \nis calculated. class(ode_integrator), intent(inout), optional, target :: integrator An optional input, used in the event the model has internal \nstate variables, that provides integration of the state \nequations.  The defaults is a singly diagonally implicit\nRunge-Kutta method (4th order) that is suitable for \nstiff ODE's. type(iteration_controls), intent(in), optional :: controls An optional input providing custom iteration controls. type(lm_solver_options), intent(in), optional :: settings An optional input providing custom settings for \nthe solver. type(convergence_info), intent(out), optional :: info An optional output that can be used to gain \ninformation about the iterative solution and the nature of \nthe convergence. type(regression_statistics), intent(out), optional, dimension(:) :: stats An optional output array of M-elements that can be\nused to retrieve statistical information regarding the fit of\neach of the M model parameters. real(kind=real64), intent(out), optional, target, dimension(:) :: fmod An optional N-element array used to provide the fitted model \nresults. real(kind=real64), intent(out), optional, target, dimension(:) :: resid An optional N-element array containing the fitted residuals. class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling. procedure, public :: from_array => sf_from_array interface private module subroutine sf_from_array(this, x, err) Converts an array into the parameters for the friction model. Arguments Type Intent Optional Attributes Name class( stribeck_model ), intent(inout) :: this The stribeck_model object. real(kind=real64), intent(in), dimension(:) :: x The array of parameters.  See parameter_count \nto determine the size of this array.  The parameter order is\nas follows. static_friction_coefficient coulomb_friction_coefficient stribeck_velocity viscous_damping class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling. procedure, public :: get_constraint_equation_count => fmdl_get_constraint_count interface private pure module function fmdl_get_constraint_count(this) result(rst) Gets the number of constraint equations the model requires to\nbe satisfied when fitting to data. Arguments Type Intent Optional Attributes Name class( friction_model ), intent(in) :: this The friction model object. Return Value integer(kind=int32) The number of constraint equations. procedure, public :: get_state_variable_count => sf_get_state_var_count interface private pure module function sf_get_state_var_count(this) result(rst) Gets the number of internal state variables used by the model. Arguments Type Intent Optional Attributes Name class( stribeck_model ), intent(in) :: this The stribeck_model object. Return Value integer(kind=int32) The internal state variable count. procedure, public :: has_internal_state => sf_has_state_vars interface private pure module function sf_has_state_vars(this) result(rst) Returns a value stating if the model relies upon internal\nstate variables. Arguments Type Intent Optional Attributes Name class( stribeck_model ), intent(in) :: this The stribeck_model object. Return Value logical Returns true if the model utilizes internal state variables;\nelse, returns false. procedure, public :: parameter_count => sf_parameter_count interface private pure module function sf_parameter_count(this) result(rst) Gets the number of model parameters. Arguments Type Intent Optional Attributes Name class( stribeck_model ), intent(in) :: this The stribeck_model object. Return Value integer(kind=int32) The number of model parameters. procedure, public :: state => sf_state_model interface private module subroutine sf_state_model(this, t, x, dxdt, nrm, svars, dsdt) Evaluates the time derivatives of the internal friction state\nmodel. Arguments Type Intent Optional Attributes Name class( stribeck_model ), intent(inout) :: this The stribeck_model object. real(kind=real64), intent(in) :: t The current simulation time value. real(kind=real64), intent(in) :: x The current value of the relative position between\nthe contacting bodies. real(kind=real64), intent(in) :: dxdt The current value of the relative velocity between\nthe contacting bodies. real(kind=real64), intent(in) :: nrm The current normal force between the contacting \nbodies. real(kind=real64), intent(in), dimension(:) :: svars An N-element array containing any internal state\nvariables the model may rely upon. real(kind=real64), intent(out), dimension(:) :: dsdt An N-element array where the state variable \nderivatives are to be written. procedure, public :: to_array => sf_to_array interface private module subroutine sf_to_array(this, x, err) Converts the parameters of the friction model into an array. Arguments Type Intent Optional Attributes Name class( stribeck_model ), intent(in) :: this The stribeck_model object. real(kind=real64), intent(out), dimension(:) :: x The array used to store the parameters.  See parameter_count \nto determine the size of this array.  The parameter order is\nas follows. static_friction_coefficient coulomb_friction_coefficient stribeck_velocity viscous_damping class(errors), intent(inout), optional, target :: err An optional errors-based object that if provided \ncan be used to retrieve information relating to any errors \nencountered during execution. If not provided, a default \nimplementation of the errors class is used internally to\nprovide error handling.","tags":"","loc":"type/stribeck_model.html"},{"title":"friction â€“ FRICTION","text":"Provides a collection of routines for modeling frictional behaviors\nof contacting bodies. Uses iso_fortran_env ferror diffeq fstats Used by Descendants: friction_coulomb friction_fitting friction_gmsm friction_lugre friction_maxwell friction_modified_stribeck friction_stribeck Contents Variables FRICTION_ARRAY_SIZE_ERROR FRICTION_INVALID_OPERATION_ERROR FRICTION_MEMORY_ERROR Derived Types coulomb_model friction_model generalized_maxwell_slip_model lugre_model maxwell_model modified_stribeck_model stribeck_model Variables Type Visibility Attributes Name Initial integer(kind=int32), public, parameter :: FRICTION_ARRAY_SIZE_ERROR = 100000 Defines an array size error. integer(kind=int32), public, parameter :: FRICTION_INVALID_OPERATION_ERROR = 100002 Defines an error within the opration of a routine. integer(kind=int32), public, parameter :: FRICTION_MEMORY_ERROR = 100001 Defines a memory allocation error. Derived Types type, public, extends( friction_model )Â :: coulomb_model Defines the basic Coulomb friction model. Read moreâ€¦ Components Type Visibility Attributes Name Initial real(kind=real64), public :: friction_coefficient The Coulomb friction coefficient. Type-Bound Procedures procedure\n                    ,                  public\n                  :: constraint_equations =>\n                    fmdl_constraints Interface procedure\n                    ,                  public\n                  :: evaluate =>\n                    cf_eval Interface procedure\n                    ,                  public\n                  :: fit =>\n                    fmdl_fit Interface procedure\n                    ,                  public\n                  :: from_array =>\n                    cf_from_array Interface procedure\n                    ,                  public\n                  :: get_constraint_equation_count =>\n                    fmdl_get_constraint_count Interface procedure\n                    ,                  public\n                  :: get_state_variable_count =>\n                    cf_get_state_var_count Interface procedure\n                    ,                  public\n                  :: has_internal_state =>\n                    cf_has_state_vars Interface procedure\n                    ,                  public\n                  :: parameter_count =>\n                    cf_parameter_count Interface procedure\n                    ,                  public\n                  :: state =>\n                    cf_state_model Interface procedure\n                    ,                  public\n                  :: to_array =>\n                    cf_to_array Interface type, publicÂ :: friction_model Defines a generic friction model. Type-Bound Procedures procedure\n                    ,                  public\n                  :: constraint_equations =>\n                    fmdl_constraints Interface procedure\n(friction_evaluation)                    ,                  public\n                  :: evaluate procedure\n                    ,                  public\n                  :: fit =>\n                    fmdl_fit Interface procedure\n(friction_model_from_array)                    ,                  public\n                  :: from_array procedure\n                    ,                  public\n                  :: get_constraint_equation_count =>\n                    fmdl_get_constraint_count Interface procedure\n(friction_integer_query)                    ,                  public\n                  :: get_state_variable_count procedure\n(friction_logical_query)                    ,                  public\n                  :: has_internal_state procedure\n(friction_integer_query)                    ,                  public\n                  :: parameter_count procedure\n(friction_state_model)                    ,                  public\n                  :: state procedure\n(friction_model_to_array)                    ,                  public\n                  :: to_array type, public, extends( friction_model )Â :: generalized_maxwell_slip_model A representation of the Generalized Maxwell Slip model. Read moreâ€¦ Components Type Visibility Attributes Name Initial real(kind=real64), public :: attraction_coefficient The attraction coefficient. real(kind=real64), public :: coulomb_coefficient The Coulomb (dynamic) friction coefficient. real(kind=real64), public :: shape_parameter The Stribeck curve shape parameter. real(kind=real64), public :: static_coefficient The static friction coefficient. real(kind=real64), public :: stiffness The frictional stiffness. real(kind=real64), public :: stribeck_velocity The Stribeck velocity parameter. real(kind=real64), public :: viscous_damping The viscous damping coefficient. Type-Bound Procedures procedure\n                    ,                  public\n                  :: constraint_equations =>\n                    fmdl_constraints Interface procedure\n                    ,                  public\n                  :: element_state =>\n                    gmsm_element_state_model Interface procedure\n                    ,                  public\n                  :: evaluate =>\n                    gmsm_eval Interface procedure\n                    ,                  public\n                  :: fit =>\n                    fmdl_fit Interface procedure\n                    ,                  public\n                  :: from_array =>\n                    gmsm_from_array Interface procedure\n                    ,                  public\n                  :: get_constraint_equation_count =>\n                    gmsm_get_constraint_count Interface procedure\n                    ,                  public\n                  :: get_element_count =>\n                    gmsm_get_element_count Interface procedure\n                    ,                  public\n                  :: get_element_damping =>\n                    gmsm_get_element_damping Interface procedure\n                    ,                  public\n                  :: get_element_scaling =>\n                    gmsm_get_element_scaling Interface procedure\n                    ,                  public\n                  :: get_element_stiffness =>\n                    gmsm_get_element_stiffness Interface procedure\n                    ,                  public\n                  :: get_state_variable_count =>\n                    gmsm_get_state_var_count Interface procedure\n                    ,                  public\n                  :: has_internal_state =>\n                    gmsm_has_state_vars Interface procedure\n                    ,                  public\n                  :: initialize =>\n                    gmsm_initialize Interface procedure\n                    ,                  public\n                  :: parameter_count =>\n                    gmsm_parameter_count Interface procedure\n                    ,                  public\n                  :: set_element_damping =>\n                    gmsm_set_element_damping Interface procedure\n                    ,                  public\n                  :: set_element_scaling =>\n                    gmsm_set_element_scaling Interface procedure\n                    ,                  public\n                  :: set_element_stiffness =>\n                    gmsm_set_element_stiffness Interface procedure\n                    ,                  public\n                  :: state =>\n                    gmsm_state_model Interface procedure\n                    ,                  public\n                  :: stribeck_function =>\n                    gmsm_stribeck_curve Interface procedure\n                    ,                  public\n                  :: to_array =>\n                    gmsm_to_array Interface type, public, extends( friction_model )Â :: lugre_model Defines the Lu-Gre friction model. Read moreâ€¦ Components Type Visibility Attributes Name Initial real(kind=real64), public :: coulomb_coefficient The Coulomb (dynamic) friction coefficient. real(kind=real64), public :: damping The bristle damping coefficient. real(kind=real64), public :: shape_parameter The Stribeck curve shape parameter. real(kind=real64), public :: static_coefficient The static friction coefficient. real(kind=real64), public :: stiffness The bristle stiffness. real(kind=real64), public :: stribeck_velocity The Stribeck velocity term. real(kind=real64), public :: viscous_damping The viscous damping coefficient. Type-Bound Procedures procedure\n                    ,                  public\n                  :: constraint_equations =>\n                    fmdl_constraints Interface procedure\n                    ,                  public\n                  :: evaluate =>\n                    lg_eval Interface procedure\n                    ,                  public\n                  :: fit =>\n                    fmdl_fit Interface procedure\n                    ,                  public\n                  :: from_array =>\n                    lg_from_array Interface procedure\n                    ,                  public\n                  :: get_constraint_equation_count =>\n                    fmdl_get_constraint_count Interface procedure\n                    ,                  public\n                  :: get_state_variable_count =>\n                    lg_get_state_var_count Interface procedure\n                    ,                  public\n                  :: has_internal_state =>\n                    lg_has_state_vars Interface procedure\n                    ,                  public\n                  :: parameter_count =>\n                    lg_parameter_count Interface procedure\n                    ,                  public\n                  :: state =>\n                    lg_state_model Interface procedure\n                    ,                  public\n                  :: to_array =>\n                    lg_to_array Interface type, public, extends( friction_model )Â :: maxwell_model Defines a single-element, Maxwell model. Read moreâ€¦ Components Type Visibility Attributes Name Initial real(kind=real64), public :: friction_coefficient The Coulomb friction coefficient. real(kind=real64), public :: stiffness The pre-sliding stiffness term. Type-Bound Procedures procedure\n                    ,                  public\n                  :: constraint_equations =>\n                    fmdl_constraints Interface procedure\n                    ,                  public\n                  :: evaluate =>\n                    mx_eval Interface procedure\n                    ,                  public\n                  :: fit =>\n                    fmdl_fit Interface procedure\n                    ,                  public\n                  :: from_array =>\n                    mx_from_array Interface procedure\n                    ,                  public\n                  :: get_constraint_equation_count =>\n                    fmdl_get_constraint_count Interface procedure\n                    ,                  public\n                  :: get_state_variable_count =>\n                    mx_get_state_var_count Interface procedure\n                    ,                  public\n                  :: has_internal_state =>\n                    mx_has_state_vars Interface procedure\n                    ,                  public\n                  :: parameter_count =>\n                    mx_parameter_count Interface procedure\n                    ,                  public\n                  :: state =>\n                    mx_state_model Interface procedure\n                    ,                  public\n                  :: to_array =>\n                    mx_to_array Interface type, public, extends( stribeck_model )Â :: modified_stribeck_model Defines a modification of the Stribeck model to account for \npresliding displacement.  The presliding region utilizes a Maxwell\ntype model then transitions to a traditional Stribeck model as\nslipping occurs. Read moreâ€¦ Components Type Visibility Attributes Name Initial real(kind=real64), public :: coulomb_friction_coefficient real(kind=real64), public :: static_friction_coefficient real(kind=real64), public :: stiffness The stiffness term. real(kind=real64), public :: stribeck_velocity real(kind=real64), public :: viscous_damping Type-Bound Procedures procedure\n                    ,                  public\n                  :: constraint_equations =>\n                    fmdl_constraints Interface procedure\n                    ,                  public\n                  :: evaluate =>\n                    msf_eval Interface procedure\n                    ,                  public\n                  :: fit =>\n                    fmdl_fit Interface procedure\n                    ,                  public\n                  :: from_array =>\n                    msf_from_array Interface procedure\n                    ,                  public\n                  :: get_constraint_equation_count =>\n                    fmdl_get_constraint_count Interface procedure\n                    ,                  public\n                  :: get_state_variable_count =>\n                    sf_get_state_var_count Interface procedure\n                    ,                  public\n                  :: has_internal_state =>\n                    sf_has_state_vars Interface procedure\n                    ,                  public\n                  :: parameter_count =>\n                    msf_parameter_count Interface procedure\n                    ,                  public\n                  :: state =>\n                    sf_state_model Interface procedure\n                    ,                  public\n                  :: to_array =>\n                    msf_to_array Interface type, public, extends( friction_model )Â :: stribeck_model This type defines a basic Stribeck-based friction model. Read moreâ€¦ Components Type Visibility Attributes Name Initial real(kind=real64), public :: coulomb_friction_coefficient real(kind=real64), public :: static_friction_coefficient real(kind=real64), public :: stribeck_velocity real(kind=real64), public :: viscous_damping Type-Bound Procedures procedure\n                    ,                  public\n                  :: constraint_equations =>\n                    fmdl_constraints Interface procedure\n                    ,                  public\n                  :: evaluate =>\n                    sf_eval Interface procedure\n                    ,                  public\n                  :: fit =>\n                    fmdl_fit Interface procedure\n                    ,                  public\n                  :: from_array =>\n                    sf_from_array Interface procedure\n                    ,                  public\n                  :: get_constraint_equation_count =>\n                    fmdl_get_constraint_count Interface procedure\n                    ,                  public\n                  :: get_state_variable_count =>\n                    sf_get_state_var_count Interface procedure\n                    ,                  public\n                  :: has_internal_state =>\n                    sf_has_state_vars Interface procedure\n                    ,                  public\n                  :: parameter_count =>\n                    sf_parameter_count Interface procedure\n                    ,                  public\n                  :: state =>\n                    sf_state_model Interface procedure\n                    ,                  public\n                  :: to_array =>\n                    sf_to_array Interface","tags":"","loc":"module/friction.html"},{"title":"friction_gmsm â€“ FRICTION","text":"Uses ieee_arithmetic Ancestors: friction Contents None","tags":"","loc":"module/friction_gmsm.html"},{"title":"friction_maxwell â€“ FRICTION","text":"Uses Ancestors: friction Contents None","tags":"","loc":"module/friction_maxwell.html"},{"title":"friction_stribeck â€“ FRICTION","text":"Uses Ancestors: friction Contents None","tags":"","loc":"module/friction_stribeck.html"},{"title":"friction_fitting â€“ FRICTION","text":"Uses fstats fitpack Ancestors: friction Contents None","tags":"","loc":"module/friction_fitting.html"},{"title":"friction_coulomb â€“ FRICTION","text":"Uses Ancestors: friction Contents None","tags":"","loc":"module/friction_coulomb.html"},{"title":"friction_lugre â€“ FRICTION","text":"Uses fstats diffeq Ancestors: friction Contents None","tags":"","loc":"module/friction_lugre.html"},{"title":"friction_modified_stribeck â€“ FRICTION","text":"Uses Ancestors: friction Contents None","tags":"","loc":"module/friction_modified_stribeck.html"},{"title":"friction.f90 â€“ FRICTION","text":"Contents Modules friction Source Code friction.f90 Source Code module friction !! Provides a collection of routines for modeling frictional behaviors !! of contacting bodies. use iso_fortran_env use fstats , only : convergence_info , regression_statistics , & iteration_controls , lm_solver_options use diffeq use ferror implicit none private public :: FRICTION_ARRAY_SIZE_ERROR public :: FRICTION_MEMORY_ERROR public :: FRICTION_INVALID_OPERATION_ERROR public :: friction_model public :: coulomb_model public :: lugre_model public :: maxwell_model public :: generalized_maxwell_slip_model public :: stribeck_model public :: modified_stribeck_model integer ( int32 ), parameter :: FRICTION_ARRAY_SIZE_ERROR = 100000 !! Defines an array size error. integer ( int32 ), parameter :: FRICTION_MEMORY_ERROR = 100001 !! Defines a memory allocation error. integer ( int32 ), parameter :: FRICTION_INVALID_OPERATION_ERROR = 100002 !! Defines an error within the opration of a routine. type , abstract :: friction_model !! Defines a generic friction model. contains procedure ( friction_evaluation ), deferred , public :: evaluate procedure ( friction_logical_query ), deferred , public :: & has_internal_state procedure ( friction_state_model ), deferred , public :: state procedure ( friction_model_to_array ), deferred , public :: to_array procedure ( friction_model_from_array ), deferred , public :: from_array procedure ( friction_integer_query ), deferred , public :: parameter_count procedure ( friction_integer_query ), deferred , public :: & get_state_variable_count procedure , public :: fit => fmdl_fit procedure , public :: constraint_equations => fmdl_constraints procedure , public :: get_constraint_equation_count => & fmdl_get_constraint_count end type interface function friction_evaluation ( this , t , x , dxdt , nrm , svars ) result ( rst ) use iso_fortran_env , only : real64 import friction_model class ( friction_model ), intent ( inout ) :: this !! The friction_model object. real ( real64 ), intent ( in ) :: t !! The current simulation time value. real ( real64 ), intent ( in ) :: x !! The current value of the relative position between !! the contacting bodies. real ( real64 ), intent ( in ) :: dxdt !! The current value of the relative velocity between !! the contacting bodies. real ( real64 ), intent ( in ) :: nrm !! The current normal force between the contacting !! bodies. real ( real64 ), intent ( in ), optional , dimension (:) :: svars !! An optional array containing any internal state !! variables the model may rely upon. real ( real64 ) :: rst !! The friction force. end function pure function friction_logical_query ( this ) result ( rst ) !! Returns a value stating if the model relies upon internal !! state variables. import friction_model class ( friction_model ), intent ( in ) :: this !! The friction_model object. logical :: rst !! Returns true if the model utilizes internal state variables; !! else, returns false. end function subroutine friction_state_model ( this , t , x , dxdt , nrm , svars , dsdt ) !! Evaluates the time derivatives of the internal friction state !! model. use iso_fortran_env , only : real64 import friction_model class ( friction_model ), intent ( inout ) :: this !! The friction_model object. real ( real64 ), intent ( in ) :: t !! The current simulation time value. real ( real64 ), intent ( in ) :: x !! The current value of the relative position between !! the contacting bodies. real ( real64 ), intent ( in ) :: dxdt !! The current value of the relative velocity between !! the contacting bodies. real ( real64 ), intent ( in ) :: nrm !! The current normal force between the contacting !! bodies. real ( real64 ), intent ( in ), dimension (:) :: svars !! An N-element array containing any internal state !! variables the model may rely upon. real ( real64 ), intent ( out ), dimension (:) :: dsdt !! An N-element array where the state variable !! derivatives are to be written. end subroutine subroutine friction_model_to_array ( this , x , err ) !! Converts the parameters of the friction model into an array. use iso_fortran_env , only : real64 use ferror import friction_model class ( friction_model ), intent ( in ) :: this !! The friction_model object. real ( real64 ), intent ( out ), dimension (:) :: x !! The array used to store the parameters.  See @ref !! parameter_count to determine the size of this array. class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine subroutine friction_model_from_array ( this , x , err ) !!  Converts an array into the parameters for the friction model. use iso_fortran_env , only : real64 use ferror import friction_model class ( friction_model ), intent ( inout ) :: this !! The friction_model object. real ( real64 ), intent ( in ), dimension (:) :: x !! The array of parameters.  See parameter_count to !! determine the size of this array. class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine pure function friction_integer_query ( this ) result ( rst ) !! Gets an integer-valued parameter from the model use iso_fortran_env , only : int32 import friction_model class ( friction_model ), intent ( in ) :: this !! The friction_model object. integer ( int32 ) :: rst !! The model parameter. end function end interface ! friction_fitting.f90 interface module subroutine fmdl_fit ( this , t , x , v , f , n , weights , maxp , & minp , alpha , integrator , controls , settings , info , stats , fmod , & resid , err ) !! Attempts to fit a friction model to the supplied data using a !! Levenberg-Marquardt solver. class ( friction_model ), intent ( inout ), target :: this !! The friction model.  On output, the model is updated with the !! final, fitted parameters. real ( real64 ), intent ( in ), target , dimension (:) :: t !! An N-element array containing the time points at which !! the friction data was sampled.  This array must contain !! monotonically increasing data. real ( real64 ), intent ( in ), target , dimension (:) :: x !! An N-element array containing the relative position !! data. real ( real64 ), intent ( in ), target , dimension (:) :: v !! An N-element array containing the relative velocity !! data. real ( real64 ), intent ( in ), target , dimension (:) :: f !! An N-element array containing the friction force data. real ( real64 ), intent ( in ), target , dimension (:) :: n !! An N-element array containing the normal force data. real ( real64 ), intent ( in ), optional , dimension (:) :: weights !! An optional N-element array that can be used to !!  weight specific data points.  The default is an array of !! all ones such that all points are weighted equally. real ( real64 ), intent ( in ), optional , dimension (:) :: maxp !! An M-element array (M = the number of model !! parameters) containing a maximum limit for each model !! parameter. real ( real64 ), intent ( in ), optional , dimension (:) :: minp !! An M-element array containing the minimum limit for !! each model parameter. real ( real64 ), intent ( in ), optional :: alpha !! An optional input that defines the significance !! level at which to evaluate the confidence intervals. The !! default value is 0.05 such that a 95% confidence interval !! is calculated. class ( ode_integrator ), intent ( inout ), target , optional :: integrator !! An optional input, used in the event the model has internal !! state variables, that provides integration of the state !! equations.  The defaults is a singly diagonally implicit !! Runge-Kutta method (4th order) that is suitable for !! stiff ODE's. type ( iteration_controls ), intent ( in ), optional :: controls !! An optional input providing custom iteration controls. type ( lm_solver_options ), intent ( in ), optional :: settings !! An optional input providing custom settings for !! the solver. type ( convergence_info ), intent ( out ), optional :: info !! An optional output that can be used to gain !! information about the iterative solution and the nature of !! the convergence. type ( regression_statistics ), intent ( out ), optional , dimension (:) :: stats !! An optional output array of M-elements that can be !! used to retrieve statistical information regarding the fit of !! each of the M model parameters. real ( real64 ), intent ( out ), optional , target , dimension (:) :: fmod !! An optional N-element array used to provide the fitted model !! results. real ( real64 ), intent ( out ), optional , target , dimension (:) :: resid !! An optional N-element array containing the fitted residuals. class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine module subroutine fmdl_constraints ( this , t , x , dxdt , nrm , f , rst ) !! Overload this routine to establish constraings for the model to !! be enforced as part of the fitting operation. class ( friction_model ), intent ( in ) :: this !! The friction_model object. real ( real64 ), intent ( in ), dimension (:) :: t !! An N-element array containing the time points at which the !! data to be fit was sampled. real ( real64 ), intent ( in ), dimension (:) :: x !! An N-element array containing the relative motion data. real ( real64 ), intent ( in ), dimension (:) :: dxdt !! An N-element array containing the relative velocity data. real ( real64 ), intent ( in ), dimension (:) :: nrm !! An N-element array containing the normal force data. real ( real64 ), intent ( in ), dimension (:) :: f !! An N-element array containing the friction force data. real ( real64 ), intent ( out ), dimension (:) :: rst !! An M-element array where the results of the constraint !! equations will be written.  M must be equal to the !! number of constraint equations for the model. end subroutine pure module function fmdl_get_constraint_count ( this ) result ( rst ) !! Gets the number of constraint equations the model requires to !! be satisfied when fitting to data. class ( friction_model ), intent ( in ) :: this !! The friction model object. integer ( int32 ) :: rst !! The number of constraint equations. end function end interface ! ------------------------------------------------------------------------------ type , extends ( friction_model ) :: coulomb_model !! Defines the basic Coulomb friction model. !! !! The Coulomb model is defined as follows. !! !!  F = sgn{ \\left( v \\right)} \\mu_{c} N  !! !! where: !! !!  F =  Friction Force !! !!  N =  Normal Force !! !!  v =  Velocity !! !!  \\mu_c =  Coulomb Friction Coefficient real ( real64 ) :: friction_coefficient !! The Coulomb friction coefficient. contains procedure , public :: evaluate => cf_eval procedure , public :: has_internal_state => cf_has_state_vars procedure , public :: state => cf_state_model procedure , public :: to_array => cf_to_array procedure , public :: from_array => cf_from_array procedure , public :: parameter_count => cf_parameter_count procedure , public :: get_state_variable_count => cf_get_state_var_count end type ! friction_coulomb.f90 interface module function cf_eval ( this , t , x , dxdt , nrm , svars ) result ( rst ) !! Evaluates the friction model given the defined parameter !! state. class ( coulomb_model ), intent ( inout ) :: this !! The coulomb_model object. real ( real64 ), intent ( in ) :: t !! The current simulation time value. real ( real64 ), intent ( in ) :: x !! The current value of the relative position between !! the contacting bodies. real ( real64 ), intent ( in ) :: dxdt !! The current value of the relative velocity between !! the contacting bodies. real ( real64 ), intent ( in ) :: nrm !! The current normal force between the contacting !! bodies. real ( real64 ), intent ( in ), optional , dimension (:) :: svars !! An optional array containing any internal state !! variables the model may rely upon. real ( real64 ) :: rst !! The friction force. end function pure module function cf_has_state_vars ( this ) result ( rst ) !! Returns a value stating if the model relies upon internal !! state variables. class ( coulomb_model ), intent ( in ) :: this !! The coulomb_model object. logical :: rst !! Returns true if the model utilizes internal state variables; !! else, returns false. end function module subroutine cf_state_model ( this , t , x , dxdt , nrm , svars , dsdt ) !! Evaluates the time derivatives of the internal friction state !! model. class ( coulomb_model ), intent ( inout ) :: this !! The coulomb_model object. real ( real64 ), intent ( in ) :: t !! The current simulation time value. real ( real64 ), intent ( in ) :: x !! The current value of the relative position between !! the contacting bodies. real ( real64 ), intent ( in ) :: dxdt !! The current value of the relative velocity between !! the contacting bodies. real ( real64 ), intent ( in ) :: nrm !! The current normal force between the contacting !! bodies. real ( real64 ), intent ( in ), dimension (:) :: svars !! An N-element array containing any internal state !! variables the model may rely upon. real ( real64 ), intent ( out ), dimension (:) :: dsdt !! An N-element array where the state variable !! derivatives are to be written. end subroutine module subroutine cf_to_array ( this , x , err ) !! Converts the parameters of the friction model into an array. class ( coulomb_model ), intent ( in ) :: this !! The coulomb_model object. real ( real64 ), intent ( out ), dimension (:) :: x !! The array used to store the parameters.  See @ref !! parameter_count to determine the size of this array. class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine module subroutine cf_from_array ( this , x , err ) !! Converts an array into the parameters for the friction model. class ( coulomb_model ), intent ( inout ) :: this !! The coulomb_model object. real ( real64 ), intent ( in ), dimension (:) :: x !! The array of parameters.  See parameter_count to !! determine the size of this array. class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine pure module function cf_parameter_count ( this ) result ( rst ) !! Gets the number of model parameters. class ( coulomb_model ), intent ( in ) :: this !! The coulomb_model object. integer ( int32 ) :: rst !! The number of model parameters. end function pure module function cf_get_state_var_count ( this ) result ( rst ) !! Gets the number of internal state variables used by the model. class ( coulomb_model ), intent ( in ) :: this !! The coulomb_model object. integer ( int32 ) :: rst !! The internal state variable count. end function end interface ! ------------------------------------------------------------------------------ type , extends ( friction_model ) :: lugre_model !! Defines the Lu-Gre friction model. !! !! The Lu-Gre model is a bristle-type model that attempts to describe !! friction using a bristle interpretation of the frictional surfaces. !! The bristle-type models assume that the frictional behavior is !! represented by an average deflection of elastic springs.  These !! springs have their own stiffness and damping properties and act as a !! typical spring-damper pair under small velocities; however, once !! sufficient velocity occurs, the bristles slip resulting in !! Coulomb-like sliding behavior. !! !! The Lu-Gre model is defined as follows. !! !!  F = \\sigma_{0} z + \\sigma_{1} \\frac{dz}{dt} + \\sigma_{2} v  !!  \\frac{dz}{dt} = v - \\frac{\\left| v \\right| z}{g(v)}  !!  g(v) = a_{1} + \\frac{a_2}{1 + s&#94;{\\alpha}}  !!  a_{1} = \\frac{\\mu_c N}{\\sigma_{0}}  !!  a_{2} = \\frac{\\mu_s N - \\mu_c N}{\\sigma_{0}}  !!  s = \\frac{\\left| v \\right|}{v_s}  !! !! where: !! !!  F =  Friction Force !! !!  N =  Normal Force !! !!  v =  Velocity !! !!  \\mu_c =  Coulomb Friction Coefficient !! !!  \\mu_s =  Static Friction Coefficient !! !!  \\sigma_{0} =  Bristle Stiffness !! !!  \\sigma_{1} =  Bristle Damping Coefficient !! !!  \\sigma_{2} =  Viscous Damping Coefficient !! !!  \\alpha =  Stribeck Curve Shape Factor !! !!  v_s =  Stribeck Velocity Coefficient real ( real64 ) :: static_coefficient !! The static friction coefficient. real ( real64 ) :: coulomb_coefficient !! The Coulomb (dynamic) friction coefficient. real ( real64 ) :: stribeck_velocity !! The Stribeck velocity term. real ( real64 ) :: stiffness !! The bristle stiffness. real ( real64 ) :: damping !! The bristle damping coefficient. real ( real64 ) :: viscous_damping !! The viscous damping coefficient. real ( real64 ) :: shape_parameter !! The Stribeck curve shape parameter. contains procedure , public :: evaluate => lg_eval procedure , public :: has_internal_state => lg_has_state_vars procedure , public :: state => lg_state_model procedure , public :: to_array => lg_to_array procedure , public :: from_array => lg_from_array procedure , public :: parameter_count => lg_parameter_count procedure , public :: get_state_variable_count => lg_get_state_var_count end type ! friction_lugre.f90 interface module function lg_eval ( this , t , x , dxdt , nrm , svars ) result ( rst ) class ( lugre_model ), intent ( inout ) :: this !! The lugre_model object. real ( real64 ), intent ( in ) :: t !! The current simulation time value. real ( real64 ), intent ( in ) :: x !! The current value of the relative position between !! the contacting bodies. real ( real64 ), intent ( in ) :: dxdt !! The current value of the relative velocity between !! the contacting bodies. real ( real64 ), intent ( in ) :: nrm !! The current normal force between the contacting !! bodies. real ( real64 ), intent ( in ), optional , dimension (:) :: svars !! An optional array containing any internal state !! variables the model may rely upon. real ( real64 ) :: rst !! The friction force. end function pure module function lg_has_state_vars ( this ) result ( rst ) !! Returns a value stating if the model relies upon internal !! state variables. class ( lugre_model ), intent ( in ) :: this !! The lugre_model object. logical :: rst !! Returns true if the model utilizes internal state variables; !! else, returns false. end function module subroutine lg_state_model ( this , t , x , dxdt , nrm , svars , dsdt ) class ( lugre_model ), intent ( inout ) :: this !! The lugre_model object. real ( real64 ), intent ( in ) :: t !! The current simulation time value. real ( real64 ), intent ( in ) :: x !! The current value of the relative position between !! the contacting bodies. real ( real64 ), intent ( in ) :: dxdt !! The current value of the relative velocity between !! the contacting bodies. real ( real64 ), intent ( in ) :: nrm !! The current normal force between the contacting !! bodies. real ( real64 ), intent ( in ), dimension (:) :: svars !! An N-element array containing any internal state !! variables the model may rely upon. real ( real64 ), intent ( out ), dimension (:) :: dsdt !! An N-element array where the state variable !! derivatives are to be written. end subroutine module subroutine lg_to_array ( this , x , err ) !! Converts the parameters of the friction model into an array. class ( lugre_model ), intent ( in ) :: this !! The lugre_model object. real ( real64 ), intent ( out ), dimension (:) :: x !! The array used to store the parameters.  See @ref !! parameter_count to determine the size of this array.  The !! parameter order is as follows: !! !!  1. static_coefficient !! !!  2. coulomb_coefficient !! !!  3. stribeck_velocity !! !!  4. stiffness !! !!  5. damping !! !!  6. viscous_damping !! !!  7. shape_parameter class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine module subroutine lg_from_array ( this , x , err ) !! Converts an array into the parameters for the friction model. class ( lugre_model ), intent ( inout ) :: this !! The lugre_model object. real ( real64 ), intent ( in ), dimension (:) :: x !! The array of parameters.  See parameter_count to !! determine the size of this array.  The parameter order is as !!  follows: !! !!  1. static_coefficient !! !!  2. coulomb_coefficient !! !!  3. stribeck_velocity !! !!  4. stiffness !! !!  5. damping !! !!  6. viscous_damping !! !!  7. shape_parameter class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine pure module function lg_parameter_count ( this ) result ( rst ) !! Gets the number of model parameters. class ( lugre_model ), intent ( in ) :: this !! The lugre_model object. integer ( int32 ) :: rst !! The number of model parameters. end function pure module function lg_get_state_var_count ( this ) result ( rst ) !! Gets the number of internal state variables used by the model. class ( lugre_model ), intent ( in ) :: this !! The lugre_model object. integer ( int32 ) :: rst !! The internal state variable count. end function end interface ! ------------------------------------------------------------------------------ type , extends ( friction_model ) :: maxwell_model !! Defines a single-element, Maxwell model. !! !! The signle-element, Maxwell model is defined as follows. !! !!  F = k \\delta  !!  \\delta_{i+1} = sgn \\left( x_{i+1} - x_{i} + \\delta_{i} \\right) \\min \\left( \\left| x_{i+1} - x_{i} + \\delta_{i} \\right|, \\Delta \\right)  !!  \\Delta = \\frac{N \\mu_c}{k}  !! !! where: !! !!  F =  Friction Force !! !!  N =  Normal Force !! !!  x =  Position !! !!  \\mu_c =  Coulomb Friction Coefficient !! !!  k =  Stiffness real ( real64 ) :: stiffness !! The pre-sliding stiffness term. real ( real64 ) :: friction_coefficient !! The Coulomb friction coefficient. ! Private, internal variables real ( real64 ), private :: x_prev = 0.0d0 real ( real64 ), private :: d_prev = 0.0d0 contains procedure , public :: evaluate => mx_eval procedure , public :: has_internal_state => mx_has_state_vars procedure , public :: state => mx_state_model procedure , public :: to_array => mx_to_array procedure , public :: from_array => mx_from_array procedure , public :: parameter_count => mx_parameter_count procedure , public :: get_state_variable_count => mx_get_state_var_count end type ! friction_maxwell.f90 interface module function mx_eval ( this , t , x , dxdt , nrm , svars ) result ( rst ) !! Evaluates the friction model given the defined parameter !! state. class ( maxwell_model ), intent ( inout ) :: this !! The maxwell_model object. real ( real64 ), intent ( in ) :: t !! The current simulation time value. real ( real64 ), intent ( in ) :: x !! The current value of the relative position between !! the contacting bodies. real ( real64 ), intent ( in ) :: dxdt !! The current value of the relative velocity between !! the contacting bodies. real ( real64 ), intent ( in ) :: nrm !! The current normal force between the contacting !! bodies. real ( real64 ), intent ( in ), optional , dimension (:) :: svars !! An optional array containing any internal state !! variables the model may rely upon. real ( real64 ) :: rst !! The friction force. end function pure module function mx_has_state_vars ( this ) result ( rst ) !! Returns a value stating if the model relies upon internal !! state variables. class ( maxwell_model ), intent ( in ) :: this !! The maxwell_model object. logical :: rst !! Returns true if the model utilizes internal state variables; !! else, returns false. end function module subroutine mx_state_model ( this , t , x , dxdt , nrm , svars , dsdt ) !! Evaluates the time derivatives of the internal friction state !! model. class ( maxwell_model ), intent ( inout ) :: this !! The maxwell_model object. real ( real64 ), intent ( in ) :: t !! The current simulation time value. real ( real64 ), intent ( in ) :: x !! The current value of the relative position between !! the contacting bodies. real ( real64 ), intent ( in ) :: dxdt !! The current value of the relative velocity between !! the contacting bodies. real ( real64 ), intent ( in ) :: nrm !! The current normal force between the contacting !! bodies. real ( real64 ), intent ( in ), dimension (:) :: svars !! An N-element array containing any internal state !! variables the model may rely upon. real ( real64 ), intent ( out ), dimension (:) :: dsdt !! An N-element array where the state variable !! derivatives are to be written. end subroutine module subroutine mx_to_array ( this , x , err ) !! Converts the parameters of the friction model into an array. class ( maxwell_model ), intent ( in ) :: this !! The maxwell_model object. real ( real64 ), intent ( out ), dimension (:) :: x !! The array used to store the parameters.  See parameter_count !! to determine the size of this array.  The parameter order is !! as follows. !! !! 1. stiffness !! !! 2. friction_coefficient class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine module subroutine mx_from_array ( this , x , err ) !! Converts an array into the parameters for the friction model. class ( maxwell_model ), intent ( inout ) :: this !! The maxwell_model object. real ( real64 ), intent ( in ), dimension (:) :: x !! The array of parameters.  See parameter_count !! to determine the size of this array.  The parameter order is !! as follows. !! !! 1. stiffness !! !! 2. friction_coefficient class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine pure module function mx_parameter_count ( this ) result ( rst ) !! Gets the number of model parameters. class ( maxwell_model ), intent ( in ) :: this !! The maxwell_model object. integer ( int32 ) :: rst !! The number of model parameters. end function pure module function mx_get_state_var_count ( this ) result ( rst ) !! Gets the number of internal state variables used by the model. class ( maxwell_model ), intent ( in ) :: this !! The maxwell_model object. integer ( int32 ) :: rst !! The internal state variable count. end function end interface ! ------------------------------------------------------------------------------ type , extends ( friction_model ) :: generalized_maxwell_slip_model !! A representation of the Generalized Maxwell Slip model. !! !! The Generalized Maxwell Slip model is defined as follows. !! !!  F = \\sum\\limits_{i=1}&#94;{n} \\left( k_i z_i + b_i \\frac{dz_i}{dt} \\right) + b_v v  !!  \\frac{dz_i}{dt} = \\begin{cases} v & \\text{if } |z_i| \\le g(v) \\\\ sgn{ \\left( v \\right)} \\nu_i C \\left( 1 - \\frac{z_i}{\\nu_i g(v)} \\right) & \\text{otherwise} \\end{cases}  !!  g(v) = a_{1} + \\frac{a_2}{1 + s&#94;{\\alpha}}  !!  a_{1} = \\frac{\\mu_c N}{\\sigma_{0}}  !!  a_{2} = \\frac{\\mu_s N - \\mu_c N}{\\sigma_{0}}  !!  s = \\frac{\\left| v \\right|}{v_s}  !!  \\sum\\limits_{i=1}&#94;n {\\nu_i} = 1  !! !! where: !! !!  F =  Friction Force !! !!  N =  Normal Force !! !!  C =  Attraction Coefficient !! !!  x =  Position !! !!  v =  Velocity !! !!  \\mu_c =  Coulomb Friction Coefficient !! !!  \\mu_s =  Static Friction Coefficient !! !!  k_i =  i-th Element Stiffness !! !!  b_i =  i-th Element Damping Coefficient !! !!  b_v =  Viscous Damping Coefficient !! !!  \\sigma_0 =  Frictional Stiffness !! !!  \\alpha =  Stribeck Curve Shape Factor !! !!  v_s =  Stribeck Velocity Coefficient !! !!  \\nu_i =  i-th Element Scaling Factor integer ( int32 ), private :: m_nModels = 0 !! The number of elements in the model real ( real64 ), private , allocatable , dimension (:) :: m_params !! An array containing the model parameters. real ( real64 ) :: static_coefficient !! The static friction coefficient. real ( real64 ) :: coulomb_coefficient !! The Coulomb (dynamic) friction coefficient. real ( real64 ) :: stribeck_velocity !! The Stribeck velocity parameter. real ( real64 ) :: shape_parameter !! The Stribeck curve shape parameter. real ( real64 ) :: attraction_coefficient !! The attraction coefficient. real ( real64 ) :: viscous_damping !! The viscous damping coefficient. real ( real64 ) :: stiffness !! The frictional stiffness. contains procedure , public :: evaluate => gmsm_eval procedure , public :: has_internal_state => gmsm_has_state_vars procedure , public :: state => gmsm_state_model procedure , public :: to_array => gmsm_to_array procedure , public :: from_array => gmsm_from_array procedure , public :: parameter_count => gmsm_parameter_count procedure , public :: get_state_variable_count => gmsm_get_state_var_count procedure , public :: get_element_count => gmsm_get_element_count procedure , public :: initialize => gmsm_initialize procedure , public :: get_element_stiffness => gmsm_get_element_stiffness procedure , public :: set_element_stiffness => gmsm_set_element_stiffness procedure , public :: get_element_damping => gmsm_get_element_damping procedure , public :: set_element_damping => gmsm_set_element_damping procedure , public :: get_element_scaling => gmsm_get_element_scaling procedure , public :: set_element_scaling => gmsm_set_element_scaling procedure , public :: stribeck_function => gmsm_stribeck_curve procedure , public :: element_state => gmsm_element_state_model procedure , public :: get_constraint_equation_count => & gmsm_get_constraint_count end type ! friction_gmsm.f90 interface module function gmsm_eval ( this , t , x , dxdt , nrm , svars ) result ( rst ) !! Evaluates the friction model given the defined parameter !! state. class ( generalized_maxwell_slip_model ), intent ( inout ) :: this !! The generalized_maxwell_slip_model object. real ( real64 ), intent ( in ) :: t !! The current simulation time value. real ( real64 ), intent ( in ) :: x !! The current value of the relative position between !! the contacting bodies. real ( real64 ), intent ( in ) :: dxdt !! The current value of the relative velocity between !! the contacting bodies. real ( real64 ), intent ( in ) :: nrm !! The current normal force between the contacting !! bodies. real ( real64 ), intent ( in ), optional , dimension (:) :: svars !! An optional array containing any internal state !! variables the model may rely upon. real ( real64 ) :: rst !! The friction force. end function pure module function gmsm_has_state_vars ( this ) result ( rst ) !! Returns a value stating if the model relies upon internal !! state variables. class ( generalized_maxwell_slip_model ), intent ( in ) :: this !! The generalized_maxwell_slip_model object. logical :: rst !! Returns true if the model utilizes internal state variables; !! else, returns false. end function module subroutine gmsm_state_model ( this , t , x , dxdt , nrm , svars , dsdt ) !! Evaluates the time derivatives of the internal friction state !! model. class ( generalized_maxwell_slip_model ), intent ( inout ) :: this !! The generalized_maxwell_slip_model object. real ( real64 ), intent ( in ) :: t !! The current simulation time value. real ( real64 ), intent ( in ) :: x !! The current value of the relative position between !! the contacting bodies. real ( real64 ), intent ( in ) :: dxdt !! The current value of the relative velocity between !! the contacting bodies. real ( real64 ), intent ( in ) :: nrm !! The current normal force between the contacting !! bodies. real ( real64 ), intent ( in ), dimension (:) :: svars !! An N-element array containing any internal state !! variables the model may rely upon. real ( real64 ), intent ( out ), dimension (:) :: dsdt !! An N-element array where the state variable !! derivatives are to be written. end subroutine module subroutine gmsm_to_array ( this , x , err ) !! Converts the parameters of the friction model into an array. class ( generalized_maxwell_slip_model ), intent ( in ) :: this !! The generalized_maxwell_slip_model object. real ( real64 ), intent ( out ), dimension (:) :: x !! The array used to store the parameters.  See parameter_count !! to determine the size of this array.  The parameter order is !! as follows: !! !!  1. static_coefficient !! !!  2. coulomb_coefficient !! !!  3. attraction_coefficient !! !!  4. stiffness !! !!  5. viscous_damping !! !!  6. stribeck_velocity !! !!  7. shape_parameter !! !!  8. element stiffness !! !!  9. element damping !! !!  10. element scaling ... class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine module subroutine gmsm_from_array ( this , x , err ) !! Converts an array into the parameters for the friction model. class ( generalized_maxwell_slip_model ), intent ( inout ) :: this !! The generalized_maxwell_slip_model object. real ( real64 ), intent ( in ), dimension (:) :: x !! The array of parameters.  See parameter_count to !! determine the size of this array. The parameter order is as !! follows: !! !!  1. static_coefficient !! !!  2. coulomb_coefficient !! !!  3. attraction_coefficient !! !!  4. stiffness !! !!  5. viscous_damping !! !!  6. stribeck_velocity !! !!  7. shape_parameter !! !!  8. element stiffness !! !!  9. element damping !! !!  10. element scaling ... class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine pure module function gmsm_parameter_count ( this ) result ( rst ) !! Gets the number of model parameters. class ( generalized_maxwell_slip_model ), intent ( in ) :: this !! The generalized_maxwell_slip_model object. integer ( int32 ) :: rst !! The number of model parameters. end function pure module function gmsm_get_state_var_count ( this ) result ( rst ) !! Gets the number of internal state variables used by the model. class ( generalized_maxwell_slip_model ), intent ( in ) :: this !! The generalized_maxwell_slip_model object. integer ( int32 ) :: rst !! The internal state variable count. end function pure module function gmsm_get_element_count ( this ) result ( rst ) !! Gets the number of friction elements in the model. class ( generalized_maxwell_slip_model ), intent ( in ) :: this !! The generalized_maxwell_slip_model object. integer ( int32 ) :: rst !! The number of friction elements in the model. end function module subroutine gmsm_initialize ( this , n , err ) !! Initializes the model. class ( generalized_maxwell_slip_model ), intent ( inout ) :: this !! The generalized_maxwell_slip_model object. integer ( int32 ), intent ( in ) :: n !! The number of friction elements.  This value must be at !! least 1. class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine pure module function gmsm_get_element_stiffness ( this , i ) result ( rst ) !! Gets the stiffness term for the specified element. class ( generalized_maxwell_slip_model ), intent ( in ) :: this !! The generalized_maxwell_slip_model object. integer ( int32 ), intent ( in ) :: i !! The index of the element. real ( real64 ) :: rst !! The requested value. end function module function gmsm_set_element_stiffness ( this , i , x ) result ( rst ) !! Sets the stiffness term for the specified element. class ( generalized_maxwell_slip_model ), intent ( inout ) :: this !! The generalized_maxwell_slip_model object. integer ( int32 ), intent ( in ) :: i !! The index of the element. real ( real64 ), intent ( in ) :: x !! The value. logical :: rst !! Returns true if the operation was successful; else, returns !! false if the object has not yet been initialized. end function pure module function gmsm_get_element_damping ( this , i ) result ( rst ) !! Gets the damping term for the specified element. class ( generalized_maxwell_slip_model ), intent ( in ) :: this !! The generalized_maxwell_slip_model object. integer ( int32 ), intent ( in ) :: i !! The index of the element. real ( real64 ) :: rst !! The requested value. end function module function gmsm_set_element_damping ( this , i , x ) result ( rst ) !! Sets the damping term for the specified element. class ( generalized_maxwell_slip_model ), intent ( inout ) :: this !! The generalized_maxwell_slip_model object. integer ( int32 ), intent ( in ) :: i !! The index of the element. real ( real64 ), intent ( in ) :: x !! The value. logical :: rst !! Returns true if the operation was successful; else, returns !! false if the object has not yet been initialized. end function pure module function gmsm_get_element_scaling ( this , i ) result ( rst ) !! Gets the scaling factor for the specified element. class ( generalized_maxwell_slip_model ), intent ( in ) :: this !! The generalized_maxwell_slip_model object. integer ( int32 ), intent ( in ) :: i !! The index of the element. real ( real64 ) :: rst !! The requested value. end function module function gmsm_set_element_scaling ( this , i , x ) result ( rst ) !! Sets the scaling factor for the specified element. class ( generalized_maxwell_slip_model ), intent ( inout ) :: this !! The generalized_maxwell_slip_model object. integer ( int32 ), intent ( in ) :: i !! The index of the element. real ( real64 ), intent ( in ) :: x !! The value. logical :: rst !! Returns true if the operation was successful; else, returns !! false if the object has not yet been initialized. end function pure module function gmsm_stribeck_curve ( this , dxdt , nrm ) result ( rst ) !! Evaluates the Stribeck function for the model. class ( generalized_maxwell_slip_model ), intent ( in ) :: this !! The generalized_maxwell_slip_model object. real ( real64 ), intent ( in ) :: dxdt !! The relative velocity between the contacting bodies. real ( real64 ), intent ( in ) :: nrm !! The normal force between the contacting bodies. real ( real64 ) :: rst !! The value of the Stribeck function.  The units are units of !! position. end function pure module function gmsm_element_state_model ( this , i , t , x , dxdt , & nrm , z ) result ( rst ) !! Computes the state equation for a single element. class ( generalized_maxwell_slip_model ), intent ( in ) :: this !! The generalized_maxwell_slip_model object. integer ( int32 ), intent ( in ) :: i !! The index of the element. real ( real64 ), intent ( in ) :: t !! The current simulation time value. real ( real64 ), intent ( in ) :: x !! The current value of the relative position between !! the contacting bodies. real ( real64 ), intent ( in ) :: dxdt !! The current value of the relative velocity between !! the contacting bodies. real ( real64 ), intent ( in ) :: nrm !! The current normal force between the contacting !! bodies. real ( real64 ), intent ( in ) :: z !! The current value of the state variable for the element. real ( real64 ) :: rst !! The value of the state equation. end function module subroutine gmsm_constraints ( this , t , x , dxdt , nrm , f , rst ) !! Evaluates the constraint equation for the GMSM model. class ( generalized_maxwell_slip_model ), intent ( in ) :: this real ( real64 ), intent ( in ), dimension (:) :: t !! An N-element array containing the time points at which the !! data to be fit was sampled. real ( real64 ), intent ( in ), dimension (:) :: x !! An N-element array containing the relative motion data. real ( real64 ), intent ( in ), dimension (:) :: dxdt !! An N-element array containing the relative velocity data. real ( real64 ), intent ( in ), dimension (:) :: nrm !! An N-element array containing the normal force data. real ( real64 ), intent ( in ), dimension (:) :: f !! An N-element array containing the friction force data. real ( real64 ), intent ( out ), dimension (:) :: rst !! An M-element array where the results of the constraint !! equations will be written.  M must be equal to the !! number of constraint equations for the model. end subroutine pure module function gmsm_get_constraint_count ( this ) result ( rst ) !! Gets the number of constraint equations the model requires to !! be satisfied when fitting to data. class ( generalized_maxwell_slip_model ), intent ( in ) :: this !! The generalized_maxwell_slip_model object. integer ( int32 ) :: rst !! The number of constraint equations. end function end interface ! ------------------------------------------------------------------------------ type , extends ( friction_model ) :: stribeck_model !! This type defines a basic Stribeck-based friction model. !! !! This model is defined as follows. !! !!  F = \\text{sgn}\\left( v \\right) \\left( \\mu_c N + N (\\mu_s - \\mu_c) e&#94;{-|v / v_s|&#94;2} \\right) + b_v v  !! !! where: !! !!  F =  Friction Force !! !!  N =  Normal Force !! !!  x =  Position !! !!  v =  Velocity !! !!  \\mu_c =  Coulomb Friction Coefficient !! !!  \\mu_s =  Static Friction Coefficient !! !!  b_v =  Viscous Damping Coefficient !! !!  v_s =  Stribeck Velocity Coefficient real ( real64 ) :: static_friction_coefficient real ( real64 ) :: coulomb_friction_coefficient real ( real64 ) :: stribeck_velocity real ( real64 ) :: viscous_damping contains procedure , public :: evaluate => sf_eval procedure , public :: has_internal_state => sf_has_state_vars procedure , public :: state => sf_state_model procedure , public :: to_array => sf_to_array procedure , public :: from_array => sf_from_array procedure , public :: parameter_count => sf_parameter_count procedure , public :: get_state_variable_count => sf_get_state_var_count end type ! friction_stribeck.f90 interface module function sf_eval ( this , t , x , dxdt , nrm , svars ) result ( rst ) !! Evaluates the friction model given the defined parameter !! state. class ( stribeck_model ), intent ( inout ) :: this !! The stribeck_model object. real ( real64 ), intent ( in ) :: t !! The current simulation time value. real ( real64 ), intent ( in ) :: x !! The current value of the relative position between !! the contacting bodies. real ( real64 ), intent ( in ) :: dxdt !! The current value of the relative velocity between !! the contacting bodies. real ( real64 ), intent ( in ) :: nrm !! The current normal force between the contacting !! bodies. real ( real64 ), intent ( in ), optional , dimension (:) :: svars !! An optional array containing any internal state !! variables the model may rely upon. real ( real64 ) :: rst !! The friction force. end function pure module function sf_has_state_vars ( this ) result ( rst ) !! Returns a value stating if the model relies upon internal !! state variables. class ( stribeck_model ), intent ( in ) :: this !! The stribeck_model object. logical :: rst !! Returns true if the model utilizes internal state variables; !! else, returns false. end function module subroutine sf_state_model ( this , t , x , dxdt , nrm , svars , dsdt ) !! Evaluates the time derivatives of the internal friction state !! model. class ( stribeck_model ), intent ( inout ) :: this !! The stribeck_model object. real ( real64 ), intent ( in ) :: t !! The current simulation time value. real ( real64 ), intent ( in ) :: x !! The current value of the relative position between !! the contacting bodies. real ( real64 ), intent ( in ) :: dxdt !! The current value of the relative velocity between !! the contacting bodies. real ( real64 ), intent ( in ) :: nrm !! The current normal force between the contacting !! bodies. real ( real64 ), intent ( in ), dimension (:) :: svars !! An N-element array containing any internal state !! variables the model may rely upon. real ( real64 ), intent ( out ), dimension (:) :: dsdt !! An N-element array where the state variable !! derivatives are to be written. end subroutine module subroutine sf_to_array ( this , x , err ) !! Converts the parameters of the friction model into an array. class ( stribeck_model ), intent ( in ) :: this !! The stribeck_model object. real ( real64 ), intent ( out ), dimension (:) :: x !! The array used to store the parameters.  See parameter_count !! to determine the size of this array.  The parameter order is !! as follows. !! !! 1. static_friction_coefficient !! !! 2. coulomb_friction_coefficient !! !! 3. stribeck_velocity !! !! 4. viscous_damping class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine module subroutine sf_from_array ( this , x , err ) !! Converts an array into the parameters for the friction model. class ( stribeck_model ), intent ( inout ) :: this !! The stribeck_model object. real ( real64 ), intent ( in ), dimension (:) :: x !! The array of parameters.  See parameter_count !! to determine the size of this array.  The parameter order is !! as follows. !! !! 1. static_friction_coefficient !! !! 2. coulomb_friction_coefficient !! !! 3. stribeck_velocity !! !! 4. viscous_damping class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine pure module function sf_parameter_count ( this ) result ( rst ) !! Gets the number of model parameters. class ( stribeck_model ), intent ( in ) :: this !! The stribeck_model object. integer ( int32 ) :: rst !! The number of model parameters. end function pure module function sf_get_state_var_count ( this ) result ( rst ) !! Gets the number of internal state variables used by the model. class ( stribeck_model ), intent ( in ) :: this !! The stribeck_model object. integer ( int32 ) :: rst !! The internal state variable count. end function end interface ! ------------------------------------------------------------------------------ type , extends ( stribeck_model ) :: modified_stribeck_model !! Defines a modification of the Stribeck model to account for !! presliding displacement.  The presliding region utilizes a Maxwell !! type model then transitions to a traditional Stribeck model as !! slipping occurs. !! !! The model is defined as follows. !! !!  F = k \\delta  !!  delta_{i+1} = \\text{sgn} \\left( x_{i+1} - x_{i} + \\delta_{i} \\right) \\min \\left( x_{i+1} - x_{i} + \\delta_{i}, g(v) \\right)  !!  g(v) = a_1 + a_2 e&#94;{-|v / v_s|&#94;2}  !!  a_{1} = \\frac{\\mu_c N}{k}  !!  a_{2} = \\frac{\\mu_s N - \\mu_c N}{k}  !! !! where: !! !!  F =  Friction Force !! !!  N =  Normal Force !! !!  v =  Velocity !! !!  \\mu_c =  Coulomb Friction Coefficient !! !!  \\mu_s =  Static Friction Coefficient !! !!  k =  Stiffness !! !!  v_s =  Stribeck Velocity Coefficient real ( real64 ) :: stiffness !! The stiffness term. ! Private, internal variables real ( real64 ), private :: x_prev = 0.0d0 real ( real64 ), private :: d_prev = 0.0d0 contains procedure , public :: evaluate => msf_eval procedure , public :: to_array => msf_to_array procedure , public :: from_array => msf_from_array procedure , public :: parameter_count => msf_parameter_count end type ! friction_stribeck.f90 interface module function msf_eval ( this , t , x , dxdt , nrm , svars ) result ( rst ) !! Evaluates the friction model given the defined parameter !! state. class ( modified_stribeck_model ), intent ( inout ) :: this !! The modified_stribeck_model object. real ( real64 ), intent ( in ) :: t !! The current simulation time value. real ( real64 ), intent ( in ) :: x !! The current value of the relative position between !! the contacting bodies. real ( real64 ), intent ( in ) :: dxdt !! The current value of the relative velocity between !! the contacting bodies. real ( real64 ), intent ( in ) :: nrm !! The current normal force between the contacting !! bodies. real ( real64 ), intent ( in ), optional , dimension (:) :: svars !! An optional array containing any internal state !! variables the model may rely upon. real ( real64 ) :: rst !! The friction force. end function module subroutine msf_to_array ( this , x , err ) !! Converts the parameters of the friction model into an array. class ( modified_stribeck_model ), intent ( in ) :: this !! The modified_stribeck_model object. real ( real64 ), intent ( out ), dimension (:) :: x !! The array used to store the parameters.  See parameter_count !! to determine the size of this array.  The parameter order is !! as follows. !! !! 1. static_friction_coefficient !! !! 2. coulomb_friction_coefficient !! !! 3. stribeck_velocity !! !! 4. viscous_damping !! !! 5. stiffness class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine module subroutine msf_from_array ( this , x , err ) !! Converts an array into the parameters for the friction model. class ( modified_stribeck_model ), intent ( inout ) :: this !! The modified_stribeck_model object. real ( real64 ), intent ( in ), dimension (:) :: x !! The array of parameters.  See parameter_count !! to determine the size of this array.  The parameter order is !! as follows. !! !! 1. static_friction_coefficient !! !! 2. coulomb_friction_coefficient !! !! 3. stribeck_velocity !! !! 4. viscous_damping !! !! 5. stiffness class ( errors ), intent ( inout ), optional , target :: err !! An optional errors-based object that if provided !! can be used to retrieve information relating to any errors !! encountered during execution. If not provided, a default !! implementation of the errors class is used internally to !! provide error handling. end subroutine pure module function msf_parameter_count ( this ) result ( rst ) !! Gets the number of model parameters. class ( modified_stribeck_model ), intent ( in ) :: this !! The modified_stribeck_model object. integer ( int32 ) :: rst !! The number of model parameters. end function end interface ! ------------------------------------------------------------------------------ end module","tags":"","loc":"sourcefile/friction.f90.html"},{"title":"friction_gmsm.f90 â€“ FRICTION","text":"Contents Submodules friction_gmsm Source Code friction_gmsm.f90 Source Code submodule ( friction ) friction_gmsm use :: ieee_arithmetic , only : ieee_value , IEEE_QUIET_NAN ! The number of model parameters per element integer ( int32 ), parameter :: PER_ELEMENT_COUNT = 3 ! The number of common model parameters integer ( int32 ), parameter :: COMMON_PARAMETER_COUNT = 7 contains ! ------------------------------------------------------------------------------ module function gmsm_eval ( this , t , x , dxdt , nrm , svars ) result ( rst ) ! Arguments class ( generalized_maxwell_slip_model ), intent ( inout ) :: this real ( real64 ), intent ( in ) :: t , x , dxdt , nrm real ( real64 ), intent ( in ), optional , dimension (:) :: svars real ( real64 ) :: rst ! Local Variables integer ( int32 ) :: i , n real ( real64 ) :: dzdt , ki , bi ! Process n = this % get_element_count () rst = 0.0d0 do i = 1 , n ki = this % get_element_stiffness ( i ) bi = this % get_element_damping ( i ) dzdt = this % element_state ( i , t , x , dxdt , nrm , svars ( i )) rst = rst + ki * svars ( i ) + bi * dzdt end do rst = rst + this % viscous_damping * dxdt end function ! ------------------------------------------------------------------------------ pure module function gmsm_has_state_vars ( this ) result ( rst ) class ( generalized_maxwell_slip_model ), intent ( in ) :: this logical :: rst rst = . true . end function ! ------------------------------------------------------------------------------ module subroutine gmsm_state_model ( this , t , x , dxdt , nrm , svars , dsdt ) ! Arguments class ( generalized_maxwell_slip_model ), intent ( inout ) :: this real ( real64 ), intent ( in ) :: t , x , dxdt , nrm real ( real64 ), intent ( in ), dimension (:) :: svars real ( real64 ), intent ( out ), dimension (:) :: dsdt ! Local Variables integer ( int32 ) :: i , n ! Process n = this % get_element_count () do i = 1 , n dsdt ( i ) = this % element_state ( i , t , x , dxdt , nrm , svars ( i )) end do end subroutine ! ------------------------------------------------------------------------------ module subroutine gmsm_to_array ( this , x , err ) ! Arguments class ( generalized_maxwell_slip_model ), intent ( in ) :: this real ( real64 ), intent ( out ), dimension (:) :: x class ( errors ), intent ( inout ), optional , target :: err ! Process if ( size ( x ) /= this % parameter_count ()) return x ( 1 ) = this % static_coefficient x ( 2 ) = this % coulomb_coefficient x ( 3 ) = this % attraction_coefficient x ( 4 ) = this % stiffness x ( 5 ) = this % viscous_damping x ( 6 ) = this % stribeck_velocity x ( 7 ) = this % shape_parameter x ( 8 :) = this % m_params end subroutine ! ------------------------------------------------------------------------------ module subroutine gmsm_from_array ( this , x , err ) ! Arguments class ( generalized_maxwell_slip_model ), intent ( inout ) :: this real ( real64 ), intent ( in ), dimension (:) :: x class ( errors ), intent ( inout ), optional , target :: err ! Process if (. not . allocated ( this % m_params )) return if ( size ( x ) /= this % parameter_count ()) return this % static_coefficient = x ( 1 ) this % coulomb_coefficient = x ( 2 ) this % attraction_coefficient = x ( 3 ) this % stiffness = x ( 4 ) this % viscous_damping = x ( 5 ) this % stribeck_velocity = x ( 6 ) this % shape_parameter = x ( 7 ) this % m_params = x ( 8 :) end subroutine ! ------------------------------------------------------------------------------ pure module function gmsm_parameter_count ( this ) result ( rst ) class ( generalized_maxwell_slip_model ), intent ( in ) :: this integer ( int32 ) :: rst rst = this % get_element_count () * PER_ELEMENT_COUNT + COMMON_PARAMETER_COUNT end function ! ------------------------------------------------------------------------------ pure module function gmsm_get_state_var_count ( this ) result ( rst ) class ( generalized_maxwell_slip_model ), intent ( in ) :: this integer ( int32 ) :: rst rst = this % get_element_count () end function ! ------------------------------------------------------------------------------ pure module function gmsm_get_element_count ( this ) result ( rst ) class ( generalized_maxwell_slip_model ), intent ( in ) :: this integer ( int32 ) :: rst if (. not . allocated ( this % m_params )) then rst = 0 else rst = this % m_nModels end if end function ! ------------------------------------------------------------------------------ module subroutine gmsm_initialize ( this , n , err ) ! Arguments class ( generalized_maxwell_slip_model ), intent ( inout ) :: this integer ( int32 ), intent ( in ) :: n class ( errors ), intent ( inout ), optional , target :: err ! Local Variables integer ( int32 ) :: m , flag class ( errors ), pointer :: errmgr type ( errors ), target :: deferr ! Initialization if ( present ( err )) then errmgr => err else errmgr => deferr end if m = n * PER_ELEMENT_COUNT ! Input Checking if ( n < 1 ) then ! TO DO: Handle error end if ! Process if (. not . allocated ( this % m_params )) then allocate ( this % m_params ( m ), stat = flag , source = 0.0d0 ) if ( flag /= 0 ) go to 10 end if if ( size ( this % m_params ) /= m ) then deallocate ( this % m_params ) allocate ( this % m_params ( m ), stat = flag , source = 0.0d0 ) if ( flag /= 0 ) go to 10 end if this % m_nModels = n ! End return ! Memory Error Handling 10 continue return end subroutine ! ------------------------------------------------------------------------------ pure module function gmsm_get_element_stiffness ( this , i ) result ( rst ) class ( generalized_maxwell_slip_model ), intent ( in ) :: this integer ( int32 ), intent ( in ) :: i real ( real64 ) :: rst if ( this % get_element_count () >= i ) then rst = this % m_params ( PER_ELEMENT_COUNT * i - 2 ) else rst = ieee_value ( rst , IEEE_QUIET_NAN ) end if end function ! -------------------- module function gmsm_set_element_stiffness ( this , i , x ) result ( rst ) ! Arguments class ( generalized_maxwell_slip_model ), intent ( inout ) :: this integer ( int32 ), intent ( in ) :: i real ( real64 ), intent ( in ) :: x logical :: rst ! Initialization rst = . true . ! Input Checking if (. not . allocated ( this % m_params )) then rst = . false . return end if if ( i < 1 . or . i > this % get_element_count ()) then rst = . false . return end if ! Process this % m_params ( PER_ELEMENT_COUNT * i - 2 ) = x end function ! ------------------------------------------------------------------------------ pure module function gmsm_get_element_damping ( this , i ) result ( rst ) class ( generalized_maxwell_slip_model ), intent ( in ) :: this integer ( int32 ), intent ( in ) :: i real ( real64 ) :: rst if ( this % get_element_count () >= i ) then rst = this % m_params ( PER_ELEMENT_COUNT * i - 1 ) else rst = ieee_value ( rst , IEEE_QUIET_NAN ) end if end function ! -------------------- module function gmsm_set_element_damping ( this , i , x ) result ( rst ) ! Arguments class ( generalized_maxwell_slip_model ), intent ( inout ) :: this integer ( int32 ), intent ( in ) :: i real ( real64 ), intent ( in ) :: x logical :: rst ! Initialization rst = . true . ! Input Checking if (. not . allocated ( this % m_params )) then rst = . false . return end if if ( i < 1 . or . i > this % get_element_count ()) then rst = . false . return end if ! Process this % m_params ( PER_ELEMENT_COUNT * i - 1 ) = x end function ! ------------------------------------------------------------------------------ pure module function gmsm_get_element_scaling ( this , i ) result ( rst ) class ( generalized_maxwell_slip_model ), intent ( in ) :: this integer ( int32 ), intent ( in ) :: i real ( real64 ) :: rst if ( this % get_element_count () >= i ) then rst = this % m_params ( PER_ELEMENT_COUNT * i ) else rst = ieee_value ( rst , IEEE_QUIET_NAN ) end if end function ! -------------------- module function gmsm_set_element_scaling ( this , i , x ) result ( rst ) ! Arguments class ( generalized_maxwell_slip_model ), intent ( inout ) :: this integer ( int32 ), intent ( in ) :: i real ( real64 ), intent ( in ) :: x logical :: rst ! Initialization rst = . true . ! Input Checking if (. not . allocated ( this % m_params )) then rst = . false . return end if if ( i < 1 . or . i > this % get_element_count ()) then rst = . false . return end if ! Process this % m_params ( PER_ELEMENT_COUNT * i ) = x end function ! ------------------------------------------------------------------------------ pure module function gmsm_stribeck_curve ( this , dxdt , nrm ) result ( rst ) ! Arguments class ( generalized_maxwell_slip_model ), intent ( in ) :: this real ( real64 ), intent ( in ) :: dxdt , nrm real ( real64 ) :: rst ! Local Variables real ( real64 ) :: a1 , a2 , s ! Process a1 = this % coulomb_coefficient * nrm / this % stiffness a2 = nrm * ( this % static_coefficient - this % coulomb_coefficient ) / & this % stiffness s = abs ( dxdt ) / this % stribeck_velocity rst = a1 + a2 / ( 1.0d0 + s ** this % shape_parameter ) end function ! ------------------------------------------------------------------------------ pure module function gmsm_element_state_model ( this , i , t , x , dxdt , nrm , z ) & result ( rst ) ! Arguments class ( generalized_maxwell_slip_model ), intent ( in ) :: this integer ( int32 ), intent ( in ) :: i real ( real64 ), intent ( in ) :: t real ( real64 ), intent ( in ) :: x real ( real64 ), intent ( in ) :: dxdt real ( real64 ), intent ( in ) :: nrm real ( real64 ), intent ( in ) :: z real ( real64 ) :: rst ! Local Variables real ( real64 ) :: s , vi , C ! Compute the Stribeck function s = this % stribeck_function ( dxdt , nrm ) ! Process if ( abs ( z ) <= s ) then rst = dxdt else C = this % attraction_coefficient vi = this % get_element_scaling ( i ) rst = sign ( 1.0d0 , dxdt ) * vi * C * ( 1.0d0 - z / ( vi * s )) end if end function ! ------------------------------------------------------------------------------ module subroutine gmsm_constraints ( this , t , x , dxdt , nrm , f , rst ) ! Arguments class ( generalized_maxwell_slip_model ), intent ( in ) :: this real ( real64 ), intent ( in ), dimension (:) :: t real ( real64 ), intent ( in ), dimension (:) :: x real ( real64 ), intent ( in ), dimension (:) :: dxdt real ( real64 ), intent ( in ), dimension (:) :: nrm real ( real64 ), intent ( in ), dimension (:) :: f real ( real64 ), intent ( out ), dimension (:) :: rst ! Local Variables integer ( int32 ) :: i , n real ( real64 ) :: sm ! Process if ( size ( rst ) /= 1 ) return sm = 0.0d0 do i = 1 , this % get_element_count () sm = sm + this % get_element_scaling ( i ) end do rst ( 1 ) = sm - 1.0d0 ! the sum of the scaling terms must be equal to 1 end subroutine ! ------------------------------------------------------------------------------ pure module function gmsm_get_constraint_count ( this ) result ( rst ) class ( generalized_maxwell_slip_model ), intent ( in ) :: this integer ( int32 ) :: rst rst = 1 end function ! ------------------------------------------------------------------------------ end submodule","tags":"","loc":"sourcefile/friction_gmsm.f90.html"},{"title":"friction_maxwell.f90 â€“ FRICTION","text":"Contents Submodules friction_maxwell Source Code friction_maxwell.f90 Source Code submodule ( friction ) friction_maxwell contains ! ------------------------------------------------------------------------------ module function mx_eval ( this , t , x , dxdt , nrm , svars ) result ( rst ) class ( maxwell_model ), intent ( inout ) :: this real ( real64 ), intent ( in ) :: t , x , dxdt , nrm real ( real64 ), intent ( in ), optional , dimension (:) :: svars real ( real64 ) :: rst real ( real64 ) :: s , d , delta delta = nrm * this % friction_coefficient / this % stiffness s = x - this % x_prev + this % d_prev d = sign ( 1.0d0 , s ) * min ( abs ( s ), delta ) rst = this % stiffness * d this % d_prev = d this % x_prev = x end function ! ------------------------------------------------------------------------------ pure module function mx_has_state_vars ( this ) result ( rst ) class ( maxwell_model ), intent ( in ) :: this logical :: rst rst = . false . end function ! ------------------------------------------------------------------------------ module subroutine mx_state_model ( this , t , x , dxdt , nrm , svars , dsdt ) class ( maxwell_model ), intent ( inout ) :: this real ( real64 ), intent ( in ) :: t , x , dxdt , nrm real ( real64 ), intent ( in ), dimension (:) :: svars real ( real64 ), intent ( out ), dimension (:) :: dsdt dsdt = 0.0d0 end subroutine ! ------------------------------------------------------------------------------ module subroutine mx_to_array ( this , x , err ) class ( maxwell_model ), intent ( in ) :: this real ( real64 ), intent ( out ), dimension (:) :: x class ( errors ), intent ( inout ), optional , target :: err x ( 1 ) = this % stiffness x ( 2 ) = this % friction_coefficient end subroutine ! ------------------------------------------------------------------------------ module subroutine mx_from_array ( this , x , err ) class ( maxwell_model ), intent ( inout ) :: this real ( real64 ), intent ( in ), dimension (:) :: x class ( errors ), intent ( inout ), optional , target :: err this % stiffness = x ( 1 ) this % friction_coefficient = x ( 2 ) end subroutine ! ------------------------------------------------------------------------------ pure module function mx_parameter_count ( this ) result ( rst ) class ( maxwell_model ), intent ( in ) :: this integer ( int32 ) :: rst rst = 2 end function ! ------------------------------------------------------------------------------ pure module function mx_get_state_var_count ( this ) result ( rst ) class ( maxwell_model ), intent ( in ) :: this integer ( int32 ) :: rst rst = 0 end function ! ------------------------------------------------------------------------------ end submodule","tags":"","loc":"sourcefile/friction_maxwell.f90.html"},{"title":"friction_stribeck.f90 â€“ FRICTION","text":"Contents Submodules friction_stribeck Source Code friction_stribeck.f90 Source Code submodule ( friction ) friction_stribeck contains ! ------------------------------------------------------------------------------ module function sf_eval ( this , t , x , dxdt , nrm , svars ) result ( rst ) class ( stribeck_model ), intent ( inout ) :: this real ( real64 ), intent ( in ) :: t , x , dxdt , nrm real ( real64 ), intent ( in ), optional , dimension (:) :: svars real ( real64 ) :: rst real ( real64 ) :: fv , Fc , Fs Fc = this % coulomb_friction_coefficient * nrm Fs = this % static_friction_coefficient * nrm fv = Fc + ( Fs - Fc ) * exp ( - abs ( dxdt / this % stribeck_velocity ) ** 2 ) + & this % viscous_damping * dxdt rst = sign ( 1.0d0 , dxdt ) * fv end function ! ------------------------------------------------------------------------------ pure module function sf_has_state_vars ( this ) result ( rst ) class ( stribeck_model ), intent ( in ) :: this logical :: rst rst = . false . end function ! ------------------------------------------------------------------------------ module subroutine sf_state_model ( this , t , x , dxdt , nrm , svars , dsdt ) class ( stribeck_model ), intent ( inout ) :: this real ( real64 ), intent ( in ) :: t , x , dxdt , nrm real ( real64 ), intent ( in ), dimension (:) :: svars real ( real64 ), intent ( out ), dimension (:) :: dsdt dsdt = 0.0d0 end subroutine ! ------------------------------------------------------------------------------ module subroutine sf_to_array ( this , x , err ) class ( stribeck_model ), intent ( in ) :: this real ( real64 ), intent ( out ), dimension (:) :: x class ( errors ), intent ( inout ), optional , target :: err x ( 1 ) = this % static_friction_coefficient x ( 2 ) = this % coulomb_friction_coefficient x ( 3 ) = this % stribeck_velocity x ( 4 ) = this % viscous_damping end subroutine ! ------------------------------------------------------------------------------ module subroutine sf_from_array ( this , x , err ) class ( stribeck_model ), intent ( inout ) :: this real ( real64 ), intent ( in ), dimension (:) :: x class ( errors ), intent ( inout ), optional , target :: err this % static_friction_coefficient = x ( 1 ) this % coulomb_friction_coefficient = x ( 2 ) this % stribeck_velocity = x ( 3 ) this % viscous_damping = x ( 4 ) end subroutine ! ------------------------------------------------------------------------------ pure module function sf_parameter_count ( this ) result ( rst ) class ( stribeck_model ), intent ( in ) :: this integer ( int32 ) :: rst rst = 4 end function ! ------------------------------------------------------------------------------ pure module function sf_get_state_var_count ( this ) result ( rst ) class ( stribeck_model ), intent ( in ) :: this integer ( int32 ) :: rst rst = 0 end function ! ------------------------------------------------------------------------------ end submodule","tags":"","loc":"sourcefile/friction_stribeck.f90.html"},{"title":"friction_fitting.f90 â€“ FRICTION","text":"Contents Submodules friction_fitting Source Code friction_fitting.f90 Source Code submodule ( friction ) friction_fitting use fstats use fitpack ! ------------------------------------------------------------------------------ ! Variables specific to the fitting process real ( real64 ), pointer , dimension (:) :: t_ real ( real64 ), pointer , dimension (:) :: x_ real ( real64 ), pointer , dimension (:) :: v_ real ( real64 ), pointer , dimension (:) :: f_ real ( real64 ), pointer , dimension (:) :: n_ real ( real64 ), pointer , dimension (:) :: initstate_ type ( fitpack_curve ), pointer :: xinterp_ type ( fitpack_curve ), pointer :: vinterp_ type ( fitpack_curve ), pointer :: ninterp_ type ( ode_container ), pointer :: mdl_ class ( friction_model ), pointer :: fmdl_ class ( ode_integrator ), pointer :: integrate_ contains ! ------------------------------------------------------------------------------ ! Routine for fitting the friction model - uses module-level variables subroutine fit_fcn ( x , p , f , stop_ ) ! Arguments real ( real64 ), intent ( in ), dimension (:) :: x , p real ( real64 ), intent ( out ), dimension (:) :: f logical , intent ( out ) :: stop_ ! Local Variables integer ( int32 ) :: i , n , npts ! Initialization n = size ( x ) npts = n - fmdl_ % get_constraint_equation_count () ! Assign the model parameters call fmdl_ % from_array ( p ) ! Evaluate the friction model and compare the results do i = 1 , npts f ( i ) = fmdl_ % evaluate ( t_ ( i ), x_ ( i ), v_ ( i ), n_ ( i )) - f_ ( i ) end do ! Evaluate constraints if ( fmdl_ % get_constraint_equation_count () > 0 ) then call fmdl_ % constraint_equations ( t_ (: npts ), x_ (: npts ), v_ (: npts ), & n_ (: npts ), f_ (: npts ), f ( npts + 1 :)) end if ! No need to stop stop_ = . false . end subroutine ! Routine for fitting if internal variables are used by the model subroutine internal_var_fit_fcn ( x , p , f , stop_ ) ! Arguments real ( real64 ), intent ( in ), dimension (:) :: x , p real ( real64 ), intent ( out ), dimension (:) :: f logical , intent ( out ) :: stop_ ! Local Variables integer ( int32 ) :: i , n , npts real ( real64 ), allocatable , dimension (:,:) :: dzdt ! Initialization n = size ( x ) npts = n - fmdl_ % get_constraint_equation_count () ! Assign the model parameters call fmdl_ % from_array ( p ) ! Integrate to determine the state variables dzdt = integrate_ % solve ( mdl_ , t_ , initstate_ ) ! Evaluate the friction model and compare the results do i = 1 , npts f ( i ) = fmdl_ % evaluate ( t_ ( i ), x_ ( i ), v_ ( i ), n_ ( i ), dzdt ( i , 2 :)) - f_ ( i ) end do ! Evaluate constraints if ( fmdl_ % get_constraint_equation_count () > 0 ) then call fmdl_ % constraint_equations ( t_ (: npts ), x_ (: npts ), v_ (: npts ), & n_ (: npts ), f_ (: npts ), f ( npts + 1 :)) end if ! No need to stop stop_ = . false . end subroutine ! ODE Routine subroutine internal_state_odes ( t , z , dzdt ) ! Arguments real ( real64 ), intent ( in ) :: t real ( real64 ), intent ( in ), dimension (:) :: z real ( real64 ), intent ( out ), dimension (:) :: dzdt ! Local Variables real ( real64 ) :: x , v , n ! Interpolate to obtain the position, velocity, and normal force values ! corresponding to time t x = xinterp_ % eval ( t ) v = vinterp_ % eval ( t ) n = ninterp_ % eval ( t ) ! Evaluate the friction model state equation call fmdl_ % state ( t , x , v , n , z , dzdt ) end subroutine ! ------------------------------------------------------------------------------ module subroutine fmdl_fit ( this , t , x , v , f , n , weights , maxp , minp , & alpha , integrator , controls , settings , info , stats , fmod , resid , err ) ! Arguments class ( friction_model ), intent ( inout ), target :: this real ( real64 ), intent ( in ), target , dimension (:) :: t , x , v , f , n real ( real64 ), intent ( in ), optional , dimension (:) :: weights , maxp , minp real ( real64 ), intent ( in ), optional :: alpha class ( ode_integrator ), intent ( inout ), target , optional :: integrator type ( iteration_controls ), intent ( in ), optional :: controls type ( lm_solver_options ), intent ( in ), optional :: settings type ( convergence_info ), intent ( out ), optional :: info type ( regression_statistics ), intent ( out ), optional , dimension (:) :: stats real ( real64 ), intent ( out ), optional , target , dimension (:) :: fmod , resid class ( errors ), intent ( inout ), optional , target :: err ! Local Variables class ( errors ), pointer :: errmgr type ( errors ), target :: deferr integer ( int32 ) :: npts , nparams , flag , np real ( real64 ), allocatable , target , dimension (:) :: params , initstate , & tc , fc , fmc , rc real ( real64 ), allocatable , dimension (:,:) :: dzdt real ( real64 ), pointer , dimension (:) :: fmodptr , residptr , tptr , fptr real ( real64 ), allocatable , target , dimension (:) :: fmoddef , residdef procedure ( regression_function ), pointer :: fcn type ( fitpack_curve ), target :: xinterp , vinterp , ninterp type ( sdirk4_integrator ), target :: def_integrator type ( ode_container ), target :: mdl ! Initialization if ( present ( err )) then errmgr => err else errmgr => deferr end if npts = size ( t ) nparams = this % parameter_count () np = npts + this % get_constraint_equation_count () if ( present ( integrator )) then integrate_ => integrator else integrate_ => def_integrator end if ! Input Checking if ( size ( x ) /= npts ) go to 10 if ( size ( v ) /= npts ) go to 11 if ( size ( f ) /= npts ) go to 12 if ( size ( n ) /= npts ) go to 13 ! Memory Allocations allocate ( params ( nparams ), stat = flag ) if ( flag /= 0 ) go to 30 call this % to_array ( params ) if ( present ( fmod )) then if ( size ( fmod ) /= npts ) go to 14 fmodptr ( 1 : npts ) => fmod ( 1 : npts ) else allocate ( fmoddef ( np ), stat = flag , source = 0.0d0 ) if ( flag /= 0 ) go to 30 fmodptr ( 1 : np ) => fmoddef ( 1 : np ) end if if ( present ( resid )) then if ( size ( resid ) /= npts ) go to 15 residptr ( 1 : npts ) => resid ( 1 : npts ) else allocate ( residdef ( np ), stat = flag , source = 0.0d0 ) if ( flag /= 0 ) go to 30 residptr ( 1 : np ) => residdef ( 1 : np ) end if ! Are we using any additional constraints? if ( this % get_constraint_equation_count () > 0 ) then allocate ( tc ( np ), fc ( np ), stat = flag , source = 0.0d0 ) if ( flag /= 0 ) go to 30 tptr ( 1 : np ) => tc ( 1 : np ) fptr ( 1 : np ) => fc ( 1 : np ) do i = 1 , npts tptr ( i ) = t ( i ) fptr ( i ) = f ( i ) end do if ( present ( fmod )) then allocate ( fmc ( np ), stat = flag , source = 0.0d0 ) if ( flag /= 0 ) go to 30 fmodptr ( 1 : np ) => fmc ( 1 : np ) end if if ( present ( resid )) then allocate ( rc ( np ), stat = flag , source = 0.0d0 ) if ( flag /= 0 ) go to 30 residptr ( 1 : np ) => rc ( 1 : np ) end if else tptr ( 1 : npts ) => t fptr ( 1 : npts ) => f end if ! Assign pointers t_ ( 1 : npts ) => t x_ ( 1 : npts ) => x v_ ( 1 : npts ) => v f_ ( 1 : npts ) => f n_ ( 1 : npts ) => n fmdl_ => this ! Compute the fit if ( this % has_internal_state ()) then fcn => internal_var_fit_fcn ! Define the interpolation objects & generate the fit flag = xinterp % new_fit ( t , x ) if ( flag > 0 ) go to 40 flag = vinterp % new_fit ( t , v ) if ( flag > 0 ) go to 40 flag = ninterp % new_fit ( t , n ) if ( flag > 0 ) go to 40 ! Set up the integrator mdl % fcn => internal_state_odes allocate ( initstate ( this % get_state_variable_count ()), source = 0.0d0 , & stat = flag ) if ( flag /= 0 ) go to 30 ! Assign pointers mdl_ => mdl initstate_ => initstate xinterp_ => xinterp vinterp_ => vinterp ninterp_ => ninterp else fcn => fit_fcn end if call nonlinear_least_squares ( fcn , tptr , fptr , params , fmodptr , residptr , & weights = weights , maxp = maxp , minp = minp , alpha = alpha , & controls = controls , settings = settings , info = info , stats = stats , & err = errmgr ) if ( errmgr % has_error_occurred ()) return call this % from_array ( params ) ! Handle outputs, if constraints are employed if ( this % get_constraint_equation_count () > 0 ) then if ( present ( fmod )) fmod = fmodptr ( 1 : npts ) if ( present ( resid )) resid = residptr ( 1 : npts ) end if ! End return ! X Array Size Error 10 continue call write_array_size_error ( \"fmdl_fit\" , \"x\" , npts , size ( x ), errmgr ) return ! V Array Size Error 11 continue call write_array_size_error ( \"fmdl_fit\" , \"v\" , npts , size ( x ), errmgr ) return ! F Array Size Error 12 continue call write_array_size_error ( \"fmdl_fit\" , \"f\" , npts , size ( x ), errmgr ) return ! N Array Size Error 13 continue call write_array_size_error ( \"fmdl_fit\" , \"n\" , npts , size ( x ), errmgr ) return ! FMod Array Size Error 14 continue call write_array_size_error ( \"fmdl_fit\" , \"fmod\" , npts , size ( x ), errmgr ) return ! Resid Array Size Error 15 continue call write_array_size_error ( \"fmdl_fit\" , \"resid\" , npts , size ( x ), errmgr ) return ! Memory Error 30 continue call write_memory_error ( \"fmdl_fit\" , flag , errmgr ) return ! Interpolation Error 40 continue call write_interpolation_error ( \"fmdl_fit\" , flag , errmgr ) return end subroutine ! ------------------------------------------------------------------------------ subroutine write_array_size_error ( fcn , arrayname , nexpect , nactual , err ) ! Arguments character ( len = * ), intent ( in ) :: fcn , arrayname integer ( int32 ), intent ( in ) :: nexpect , nactual class ( errors ), intent ( inout ) :: err ! Local Variables character ( len = 256 ) :: errmsg ! Process write ( errmsg , 100 ) \"Expected \" // arrayname // \" to be \" , nexpect , & \" in size, but found it to be \" , nactual , \" in size.\" call err % report_error ( fcn , trim ( errmsg ), FRICTION_ARRAY_SIZE_ERROR ) ! Formatting 100 format ( A , I0 , A , I0 , A ) end subroutine ! ------------------------------------------------------------------------------ subroutine write_memory_error ( fcn , flag , err ) ! Arguments character ( len = * ), intent ( in ) :: fcn integer ( int32 ), intent ( in ) :: flag class ( errors ), intent ( inout ) :: err ! Local Variables character ( len = 256 ) :: errmsg ! Process write ( errmsg , 100 ) \"Memory allocation error flag \" , flag , \" encountered.\" call err % report_error ( fcn , trim ( errmsg ), FRICTION_MEMORY_ERROR ) ! Formatting 100 format ( A , I0 , A ) end subroutine ! ------------------------------------------------------------------------------ subroutine write_interpolation_error ( fcn , flag , err ) ! Arguments character ( len = * ), intent ( in ) :: fcn integer ( int32 ), intent ( in ) :: flag class ( errors ), intent ( inout ) :: err ! Local Variables character ( len = 256 ) :: errmsg ! Process write ( errmsg , 100 ) \"Interpolation error flag \" , flag , \" encountered.\" call err % report_error ( fcn , trim ( errmsg ), FRICTION_INVALID_OPERATION_ERROR ) ! Formatting 100 format ( A , I0 , A ) end subroutine ! ------------------------------------------------------------------------------ module subroutine fmdl_constraints ( this , t , x , dxdt , nrm , f , rst ) class ( friction_model ), intent ( in ) :: this real ( real64 ), intent ( in ), dimension (:) :: t real ( real64 ), intent ( in ), dimension (:) :: x real ( real64 ), intent ( in ), dimension (:) :: dxdt real ( real64 ), intent ( in ), dimension (:) :: nrm real ( real64 ), intent ( in ), dimension (:) :: f real ( real64 ), intent ( out ), dimension (:) :: rst if ( size ( rst ) > 0 ) rst = 0.0d0 end subroutine ! ------------------------------------------------------------------------------ pure module function fmdl_get_constraint_count ( this ) result ( rst ) class ( friction_model ), intent ( in ) :: this integer ( int32 ) :: rst rst = 0 end function ! ------------------------------------------------------------------------------ end submodule","tags":"","loc":"sourcefile/friction_fitting.f90.html"},{"title":"friction_coulomb.f90 â€“ FRICTION","text":"Contents Submodules friction_coulomb Source Code friction_coulomb.f90 Source Code submodule ( friction ) friction_coulomb contains ! ------------------------------------------------------------------------------ module function cf_eval ( this , t , x , dxdt , nrm , svars ) result ( rst ) class ( coulomb_model ), intent ( inout ) :: this real ( real64 ), intent ( in ) :: t , x , dxdt , nrm real ( real64 ), intent ( in ), optional , dimension (:) :: svars real ( real64 ) :: rst if ( dxdt /= 0.0d0 ) then rst = this % friction_coefficient * nrm * sign ( 1.0d0 , dxdt ) else rst = 0.0d0 end if end function ! ------------------------------------------------------------------------------ pure module function cf_has_state_vars ( this ) result ( rst ) class ( coulomb_model ), intent ( in ) :: this logical :: rst rst = . false . end function ! ------------------------------------------------------------------------------ module subroutine cf_state_model ( this , t , x , dxdt , nrm , svars , dsdt ) class ( coulomb_model ), intent ( inout ) :: this real ( real64 ), intent ( in ) :: t , x , dxdt , nrm real ( real64 ), intent ( in ), dimension (:) :: svars real ( real64 ), intent ( out ), dimension (:) :: dsdt dsdt = 0.0d0 end subroutine ! ------------------------------------------------------------------------------ module subroutine cf_to_array ( this , x , err ) class ( coulomb_model ), intent ( in ) :: this real ( real64 ), intent ( out ), dimension (:) :: x class ( errors ), intent ( inout ), optional , target :: err x ( 1 ) = this % friction_coefficient end subroutine ! ------------------------------------------------------------------------------ module subroutine cf_from_array ( this , x , err ) class ( coulomb_model ), intent ( inout ) :: this real ( real64 ), intent ( in ), dimension (:) :: x class ( errors ), intent ( inout ), optional , target :: err this % friction_coefficient = x ( 1 ) end subroutine ! ------------------------------------------------------------------------------ pure module function cf_parameter_count ( this ) result ( rst ) class ( coulomb_model ), intent ( in ) :: this integer ( int32 ) :: rst rst = 1 end function ! ------------------------------------------------------------------------------ pure module function cf_get_state_var_count ( this ) result ( rst ) class ( coulomb_model ), intent ( in ) :: this integer ( int32 ) :: rst rst = 0 end function ! ------------------------------------------------------------------------------ end submodule","tags":"","loc":"sourcefile/friction_coulomb.f90.html"},{"title":"friction_lugre.f90 â€“ FRICTION","text":"Contents Submodules friction_lugre Source Code friction_lugre.f90 Source Code submodule ( friction ) friction_lugre use fstats use diffeq contains ! ------------------------------------------------------------------------------ module function lg_eval ( this , t , x , dxdt , nrm , svars ) result ( rst ) ! Arguments class ( lugre_model ), intent ( inout ) :: this real ( real64 ), intent ( in ) :: t , x , dxdt , nrm real ( real64 ), intent ( in ), optional , dimension (:) :: svars real ( real64 ) :: rst ! Local Variables ! real(real64) :: s1, dsdt(1) real ( real64 ) :: dsdt ( 1 ) ! Process call this % state ( t , x , dxdt , nrm , svars , dsdt ) ! s1 = this%damping * exp(-(dxdt / this%stribeck_velocity)**2) rst = this % stiffness * svars ( 1 ) + this % damping * dsdt ( 1 ) + & this % viscous_damping * dxdt end function ! ------------------------------------------------------------------------------ pure module function lg_has_state_vars ( this ) result ( rst ) class ( lugre_model ), intent ( in ) :: this logical :: rst rst = . true . end function ! ------------------------------------------------------------------------------ module subroutine lg_state_model ( this , t , x , dxdt , nrm , svars , dsdt ) ! Arguments class ( lugre_model ), intent ( inout ) :: this real ( real64 ), intent ( in ) :: t , x , dxdt , nrm real ( real64 ), intent ( in ), dimension (:) :: svars real ( real64 ), intent ( out ), dimension (:) :: dsdt ! Local Variables real ( real64 ) :: g , a1 , a2 , Fc , Fs ! Initialization Fc = nrm * this % coulomb_coefficient Fs = nrm * this % static_coefficient a1 = Fc / this % stiffness a2 = ( Fs - Fc ) / this % stiffness ! Compute the state variable derivative g = a1 + a2 / & ( 1.0d0 + ( abs ( dxdt ) / this % stribeck_velocity ) ** this % shape_parameter ) dsdt ( 1 ) = dxdt - abs ( dxdt ) * svars ( 1 ) / g end subroutine ! ------------------------------------------------------------------------------ module subroutine lg_to_array ( this , x , err ) class ( lugre_model ), intent ( in ) :: this real ( real64 ), intent ( out ), dimension (:) :: x class ( errors ), intent ( inout ), optional , target :: err x ( 1 ) = this % static_coefficient x ( 2 ) = this % coulomb_coefficient x ( 3 ) = this % stribeck_velocity x ( 4 ) = this % stiffness x ( 5 ) = this % damping x ( 6 ) = this % viscous_damping x ( 7 ) = this % shape_parameter end subroutine ! ------------------------------------------------------------------------------ module subroutine lg_from_array ( this , x , err ) class ( lugre_model ), intent ( inout ) :: this real ( real64 ), intent ( in ), dimension (:) :: x class ( errors ), intent ( inout ), optional , target :: err this % static_coefficient = x ( 1 ) this % coulomb_coefficient = x ( 2 ) this % stribeck_velocity = x ( 3 ) this % stiffness = x ( 4 ) this % damping = x ( 5 ) this % viscous_damping = x ( 6 ) this % shape_parameter = x ( 7 ) end subroutine ! ------------------------------------------------------------------------------ pure module function lg_parameter_count ( this ) result ( rst ) class ( lugre_model ), intent ( in ) :: this integer ( int32 ) :: rst rst = 7 end function ! ------------------------------------------------------------------------------ pure module function lg_get_state_var_count ( this ) result ( rst ) class ( lugre_model ), intent ( in ) :: this integer ( int32 ) :: rst rst = 1 end function ! ------------------------------------------------------------------------------ end submodule","tags":"","loc":"sourcefile/friction_lugre.f90.html"},{"title":"friction_modified_stribeck.f90 â€“ FRICTION","text":"Contents Submodules friction_modified_stribeck Source Code friction_modified_stribeck.f90 Source Code submodule ( friction ) friction_modified_stribeck contains ! ------------------------------------------------------------------------------ module function msf_eval ( this , t , x , dxdt , nrm , svars ) result ( rst ) class ( modified_stribeck_model ), intent ( inout ) :: this real ( real64 ), intent ( in ) :: t , x , dxdt , nrm real ( real64 ), intent ( in ), optional , dimension (:) :: svars real ( real64 ) :: rst real ( real64 ) :: gv , a1 , a2 , zeta , delta a1 = this % coulomb_friction_coefficient * nrm / this % stiffness a2 = nrm * ( this % static_friction_coefficient - & this % coulomb_friction_coefficient ) / this % stiffness gv = a1 + a2 * exp ( - abs ( dxdt / this % stribeck_velocity ) ** 2 ) zeta = x - this % x_prev + this % d_prev delta = sign ( 1.0d0 , zeta ) * min ( abs ( zeta ), gv ) rst = this % stiffness * delta + this % viscous_damping * dxdt this % d_prev = delta this % x_prev = x end function ! ------------------------------------------------------------------------------ module subroutine msf_to_array ( this , x , err ) class ( modified_stribeck_model ), intent ( in ) :: this real ( real64 ), intent ( out ), dimension (:) :: x class ( errors ), intent ( inout ), optional , target :: err x ( 1 ) = this % static_friction_coefficient x ( 2 ) = this % coulomb_friction_coefficient x ( 3 ) = this % stribeck_velocity x ( 4 ) = this % viscous_damping x ( 5 ) = this % stiffness end subroutine ! ------------------------------------------------------------------------------ module subroutine msf_from_array ( this , x , err ) class ( modified_stribeck_model ), intent ( inout ) :: this real ( real64 ), intent ( in ), dimension (:) :: x class ( errors ), intent ( inout ), optional , target :: err this % static_friction_coefficient = x ( 1 ) this % coulomb_friction_coefficient = x ( 2 ) this % stribeck_velocity = x ( 3 ) this % viscous_damping = x ( 4 ) this % stiffness = x ( 5 ) end subroutine ! ------------------------------------------------------------------------------ pure module function msf_parameter_count ( this ) result ( rst ) class ( modified_stribeck_model ), intent ( in ) :: this integer ( int32 ) :: rst rst = 5 end function ! ------------------------------------------------------------------------------ end submodule","tags":"","loc":"sourcefile/friction_modified_stribeck.f90.html"}]}